import os
import json
import csv
from typing import Dict, List, Any
import customtkinter as ctk
from tkinter import messagebox, filedialog
from plugin_system import MenuPluginInterface, EventPluginInterface

class ExportImportPlugin(MenuPluginInterface, EventPluginInterface):
    """–ü–ª–∞–≥–∏–Ω –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏ –∏–º–ø–æ—Ä—Ç–∞ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º"""
    
    def __init__(self):
        self.launcher = None
    
    def get_name(self) -> str:
        return "Export/Import"
    
    def get_version(self) -> str:
        return "1.0.0"
    
    def get_description(self) -> str:
        return "–≠–∫—Å–ø–æ—Ä—Ç –∏ –∏–º–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö"
    
    def get_author(self) -> str:
        return "Cursor Launcher Team"
    
    def initialize(self, launcher_instance) -> bool:
        self.launcher = launcher_instance
        return True
    
    def cleanup(self) -> bool:
        return True
    
    def get_menu_items(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é"""
        return [
            {
                'parent': '–§–∞–π–ª',
                'text': 'üì§ –≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–≥—Ä–∞–º–º',
                'command': self.show_export_dialog,
                'separator': False
            },
            {
                'parent': '–§–∞–π–ª',
                'text': 'üì• –ò–º–ø–æ—Ä—Ç –ø—Ä–æ–≥—Ä–∞–º–º',
                'command': self.show_import_dialog,
                'separator': False
            },
            {
                'parent': '–§–∞–π–ª',
                'text': 'üìã –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è',
                'command': self.create_backup,
                'separator': True
            }
        ]
    
    def show_export_dialog(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
        if not self.launcher or not hasattr(self.launcher, 'programs'):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º!")
            return
        
        # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞
        export_window = ctk.CTkToplevel(self.launcher.root)
        export_window.title("–≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–≥—Ä–∞–º–º")
        export_window.geometry("400x300")
        export_window.resizable(False, False)
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        export_window.update_idletasks()
        width = export_window.winfo_width()
        height = export_window.winfo_height()
        x = (export_window.winfo_screenwidth() // 2) - (width // 2)
        y = (export_window.winfo_screenheight() // 2) - (height // 2)
        export_window.geometry(f"{width}x{height}+{x}+{y}")
        
        main_frame = ctk.CTkFrame(export_window)
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        title_label = ctk.CTkLabel(
            main_frame,
            text="üì§ –≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–≥—Ä–∞–º–º",
            font=ctk.CTkFont(size=18, weight="bold")
        )
        title_label.pack(pady=10)
        
        # –í—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞
        format_label = ctk.CTkLabel(
            main_frame,
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞:",
            font=ctk.CTkFont(size=14)
        )
        format_label.pack(pady=5)
        
        format_var = ctk.StringVar(value="json")
        
        json_radio = ctk.CTkRadioButton(
            main_frame,
            text="JSON (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)",
            variable=format_var,
            value="json"
        )
        json_radio.pack(pady=5)
        
        csv_radio = ctk.CTkRadioButton(
            main_frame,
            text="CSV (–¥–ª—è Excel)",
            variable=format_var,
            value="csv"
        )
        csv_radio.pack(pady=5)
        
        txt_radio = ctk.CTkRadioButton(
            main_frame,
            text="TXT (–ø—Ä–æ—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫)",
            variable=format_var,
            value="txt"
        )
        txt_radio.pack(pady=5)
        
        # –ö–Ω–æ–ø–∫–∏
        buttons_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        buttons_frame.pack(fill="x", pady=20)
        
        export_button = ctk.CTkButton(
            buttons_frame,
            text="üì§ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å",
            command=lambda: self.export_programs(format_var.get(), export_window)
        )
        export_button.pack(side="left", padx=5)
        
        cancel_button = ctk.CTkButton(
            buttons_frame,
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            command=export_window.destroy
        )
        cancel_button.pack(side="right", padx=5)
    
    def export_programs(self, format_type: str, window):
        """–≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–≥—Ä–∞–º–º –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        if not self.launcher or not hasattr(self.launcher, 'programs'):
            return
        
        # –í—ã–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        file_types = {
            "json": [("JSON —Ñ–∞–π–ª—ã", "*.json"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")],
            "csv": [("CSV —Ñ–∞–π–ª—ã", "*.csv"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")],
            "txt": [("–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã", "*.txt"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")]
        }
        
        filename = filedialog.asksaveasfilename(
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫",
            filetypes=file_types[format_type],
            defaultextension=f".{format_type}"
        )
        
        if not filename:
            return
        
        try:
            if format_type == "json":
                self.export_to_json(filename)
            elif format_type == "csv":
                self.export_to_csv(filename)
            elif format_type == "txt":
                self.export_to_txt(filename)
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ü—Ä–æ–≥—Ä–∞–º–º—ã —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {filename}")
            window.destroy()
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {str(e)}")
    
    def export_to_json(self, filename: str):
        if not self.launcher or not hasattr(self.launcher, 'programs'):
            return
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(self.launcher.programs, f, ensure_ascii=False, indent=2)
    
    def export_to_csv(self, filename: str):
        if not self.launcher or not hasattr(self.launcher, 'programs'):
            return
        with open(filename, 'w', newline='', encoding='utf-8') as f:
            writer = csv.writer(f)
            writer.writerow(['–ù–∞–∑–≤–∞–Ω–∏–µ', '–ü—É—Ç—å', '–û–ø–∏—Å–∞–Ω–∏–µ', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è'])
            for program in self.launcher.programs:
                writer.writerow([
                    program.get('name', ''),
                    program.get('path', ''),
                    program.get('description', ''),
                    program.get('category', ''),
                    program.get('date_added', '')
                ])
    
    def export_to_txt(self, filename: str):
        if not self.launcher or not hasattr(self.launcher, 'programs'):
            return
        with open(filename, 'w', encoding='utf-8') as f:
            for program in self.launcher.programs:
                f.write(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {program.get('name', '')}\n")
                f.write(f"–ü—É—Ç—å: {program.get('path', '')}\n")
                f.write(f"–û–ø–∏—Å–∞–Ω–∏–µ: {program.get('description', '')}\n")
                f.write(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {program.get('category', '')}\n")
                f.write(f"–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {program.get('date_added', '')}\n")
                f.write("-" * 50 + "\n")
    
    def show_import_dialog(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ –∏–º–ø–æ—Ä—Ç–∞"""
        if not self.launcher:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–õ–∞—É–Ω—á–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
            return
        
        # –í—ã–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
        filename = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞",
            filetypes=[
                ("JSON —Ñ–∞–π–ª—ã", "*.json"),
                ("CSV —Ñ–∞–π–ª—ã", "*.csv"),
                ("–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã", "*.txt"),
                ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")
            ]
        )
        
        if not filename:
            return
        
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
            ext = os.path.splitext(filename)[1].lower()
            
            if ext == '.json':
                self.import_from_json(filename)
            elif ext == '.csv':
                self.import_from_csv(filename)
            elif ext == '.txt':
                self.import_from_txt(filename)
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞!")
                return
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ü—Ä–æ–≥—Ä–∞–º–º—ã —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            if hasattr(self.launcher, 'update_program_cards'):
                self.launcher.update_program_cards()
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: {str(e)}")
    
    def import_from_json(self, filename: str):
        if not self.launcher or not hasattr(self.launcher, 'programs'):
            return
        with open(filename, 'r', encoding='utf-8') as f:
            imported_programs = json.load(f)
        for program in imported_programs:
            if not any(p['name'] == program['name'] for p in self.launcher.programs):
                self.launcher.programs.append(program)
        if hasattr(self.launcher, 'save_programs'):
            self.launcher.save_programs()
    
    def import_from_csv(self, filename: str):
        if not self.launcher or not hasattr(self.launcher, 'programs'):
            return
        imported_programs = []
        with open(filename, 'r', newline='', encoding='utf-8') as f:
            reader = csv.DictReader(f)
            for row in reader:
                program = {
                    'name': row.get('–ù–∞–∑–≤–∞–Ω–∏–µ', ''),
                    'path': row.get('–ü—É—Ç—å', ''),
                    'description': row.get('–û–ø–∏—Å–∞–Ω–∏–µ', ''),
                    'category': row.get('–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–û–±—â–∏–µ'),
                    'date_added': row.get('–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è', '')
                }
                imported_programs.append(program)
        for program in imported_programs:
            if not any(p['name'] == program['name'] for p in self.launcher.programs):
                self.launcher.programs.append(program)
        if hasattr(self.launcher, 'save_programs'):
            self.launcher.save_programs()
    
    def import_from_txt(self, filename: str):
        """–ò–º–ø–æ—Ä—Ç –∏–∑ TXT (–±–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)"""
        # –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å
        messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ò–º–ø–æ—Ä—Ç –∏–∑ TXT —Ñ–∞–π–ª–æ–≤ –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
    
    def create_backup(self):
        if not self.launcher or not hasattr(self.launcher, 'programs'):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é!")
            return
        backup_dir = "backups"
        if not os.path.exists(backup_dir):
            os.makedirs(backup_dir)
        from datetime import datetime
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_filename = os.path.join(backup_dir, f"programs_backup_{timestamp}.json")
        try:
            with open(backup_filename, 'w', encoding='utf-8') as f:
                json.dump(self.launcher.programs, f, ensure_ascii=False, indent=2)
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_filename}")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {str(e)}")
    
    def on_program_launched(self, program: Dict[str, Any]) -> None:
        """–ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º"""
        pass
    
    def on_program_added(self, program: Dict[str, Any]) -> None:
        """–ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º"""
        pass
    
    def on_program_removed(self, program: Dict[str, Any]) -> None:
        """–ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º"""
        pass 
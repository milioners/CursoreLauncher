import tkinter as tk
from tkinter import ttk, messagebox, filedialog, simpledialog
import json
import os
import subprocess
import threading
import time
from datetime import datetime
import customtkinter as ctk
from PIL import Image, ImageTk
import re
import webbrowser

# –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∫–æ–Ω–∫–∞–º–∏
ICON_SUPPORT = True  # –í—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏–∫–æ–Ω–æ–∫

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
CURRENT_VERSION = "1.0.0"
UPDATE_CHECK_URL = "https://api.github.com/repos/milioners/MyLauncher/releases/latest"
GITHUB_RELEASES_URL = "https://github.com/milioners/MyLauncher/releases"

class AddProgramWindow:
    def __init__(self, parent, callback):
        self.parent = parent
        self.callback = callback
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞
        self.window = ctk.CTkToplevel(parent)
        self.window.title("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É")
        self.window.geometry("700x650")
        self.window.resizable(False, False)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        self.window.transient(parent)
        self.window.grab_set()
        self.window.focus_set()
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
        self.center_window()
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.program_name = tk.StringVar()
        self.program_path = tk.StringVar()
        self.program_description = tk.StringVar()
        self.program_category = tk.StringVar(value="–û–±—â–∏–µ")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_widgets()
        
        # –§–æ–∫—É—Å –Ω–∞ –ø–µ—Ä–≤–æ–µ –ø–æ–ª–µ
        self.name_entry.focus()
        
    def center_window(self):
        """–¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞"""
        self.window.update_idletasks()
        width = self.window.winfo_width()
        height = self.window.winfo_height()
        x = (self.window.winfo_screenwidth() // 2) - (width // 2)
        y = (self.window.winfo_screenheight() // 2) - (height // 2)
        self.window.geometry(f"{width}x{height}+{x}+{y}")
        
    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
        main_container = ctk.CTkFrame(self.window, fg_color="#1a1a1a")
        main_container.pack(fill="both", expand=True, padx=20, pady=20)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = ctk.CTkFrame(main_container, fg_color="#2d2d2d", corner_radius=10)
        header_frame.pack(fill="x", padx=20, pady=(20, 10))
        
        title_label = ctk.CTkLabel(
            header_frame,
            text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É",
            font=ctk.CTkFont(size=24, weight="bold"),
            text_color="#FFD700"
        )
        title_label.pack(pady=20)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —Ñ–æ—Ä–º–∞
        form_container = ctk.CTkScrollableFrame(main_container, fg_color="#2d2d2d", corner_radius=10)
        form_container.pack(fill="both", expand=True, padx=20, pady=10)
        
        # –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        name_frame = ctk.CTkFrame(form_container, fg_color="#3d3d3d", corner_radius=8)
        name_frame.pack(fill="x", padx=20, pady=10)
        
        name_label = ctk.CTkLabel(
            name_frame,
            text="üìù –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã",
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color="#FFFFFF"
        )
        name_label.pack(anchor="w", padx=20, pady=(15, 5))
        
        self.name_entry = ctk.CTkEntry(
            name_frame,
            textvariable=self.program_name,
            placeholder_text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã...",
            font=ctk.CTkFont(size=14),
            height=45,
            fg_color="#4d4d4d",
            border_color="#5d5d5d",
            corner_radius=8
        )
        self.name_entry.pack(fill="x", padx=20, pady=(0, 15))
        
        # –ü—É—Ç—å –∫ –ø—Ä–æ–≥—Ä–∞–º–º–µ
        path_frame = ctk.CTkFrame(form_container, fg_color="#3d3d3d", corner_radius=8)
        path_frame.pack(fill="x", padx=20, pady=10)
        
        path_label = ctk.CTkLabel(
            path_frame,
            text="üìÅ –ü—É—Ç—å –∫ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–º—É —Ñ–∞–π–ª—É",
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color="#FFFFFF"
        )
        path_label.pack(anchor="w", padx=20, pady=(15, 5))
        
        path_input_frame = ctk.CTkFrame(path_frame, fg_color="transparent")
        path_input_frame.pack(fill="x", padx=20, pady=(0, 15))
        
        self.path_entry = ctk.CTkEntry(
            path_input_frame,
            textvariable=self.program_path,
            placeholder_text="–í—ã–±–µ—Ä–∏—Ç–µ .exe —Ñ–∞–π–ª...",
            font=ctk.CTkFont(size=14),
            height=45,
            fg_color="#4d4d4d",
            border_color="#5d5d5d",
            corner_radius=8
        )
        self.path_entry.pack(side="left", fill="x", expand=True, padx=(0, 10))
        
        browse_button = ctk.CTkButton(
            path_input_frame,
            text="üìÇ –û–±–∑–æ—Ä",
            command=self.browse_file,
            font=ctk.CTkFont(size=12, weight="bold"),
            width=100,
            height=45,
            fg_color="#2196F3",
            hover_color="#1976D2",
            corner_radius=8
        )
        browse_button.pack(side="right")
        
        # –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        desc_frame = ctk.CTkFrame(form_container, fg_color="#3d3d3d", corner_radius=8)
        desc_frame.pack(fill="x", padx=20, pady=10)
        
        desc_label = ctk.CTkLabel(
            desc_frame,
            text="üìÑ –û–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)",
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color="#FFFFFF"
        )
        desc_label.pack(anchor="w", padx=20, pady=(15, 5))
        
        self.desc_textbox = ctk.CTkTextbox(
            desc_frame,
            height=80,
            font=ctk.CTkFont(size=12),
            fg_color="#4d4d4d",
            border_color="#5d5d5d",
            corner_radius=8
        )
        self.desc_textbox.pack(fill="x", padx=20, pady=(0, 15))
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏—è
        category_frame = ctk.CTkFrame(form_container, fg_color="#3d3d3d", corner_radius=8)
        category_frame.pack(fill="x", padx=20, pady=10)
        
        category_label = ctk.CTkLabel(
            category_frame,
            text="üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è",
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color="#FFFFFF"
        )
        category_label.pack(anchor="w", padx=20, pady=(15, 5))
        
        categories = ["–û–±—â–∏–µ", "–ò–≥—Ä—ã", "–†–∞–±–æ—Ç–∞", "–ú—É–ª—å—Ç–∏–º–µ–¥–∏–∞", "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç", "–£—Ç–∏–ª–∏—Ç—ã", "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞"]
        self.category_menu = ctk.CTkOptionMenu(
            category_frame,
            values=categories,
            variable=self.program_category,
            font=ctk.CTkFont(size=14),
            height=45,
            fg_color="#4d4d4d",
            button_color="#5d5d5d",
            button_hover_color="#6d6d6d",
            corner_radius=8
        )
        self.category_menu.pack(fill="x", padx=20, pady=(0, 15))
        
        # –ö–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É –æ–∫–Ω–∞
        self.create_bottom_buttons(main_container)
        
    def create_bottom_buttons(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤–Ω–∏–∑—É –æ–∫–Ω–∞"""
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤–Ω–µ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º–æ–π –æ–±–ª–∞—Å—Ç–∏
        buttons_frame = ctk.CTkFrame(parent, fg_color="transparent")
        buttons_frame.pack(fill="x", padx=20, pady=20, side="bottom")
        
        cancel_button = ctk.CTkButton(
            buttons_frame,
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            command=self.cancel,
            font=ctk.CTkFont(size=14, weight="bold"),
            height=45,
            fg_color="#F44336",
            hover_color="#D32F2F",
            corner_radius=22
        )
        cancel_button.pack(side="left", padx=(0, 10), expand=True)
        
        add_button = ctk.CTkButton(
            buttons_frame,
            text="‚úÖ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É",
            command=self.add_program,
            font=ctk.CTkFont(size=14, weight="bold"),
            height=45,
            fg_color="#4CAF50",
            hover_color="#45a049",
            corner_radius=22
        )
        add_button.pack(side="right", padx=(10, 0), expand=True)
        
    def browse_file(self):
        """–í—ã–±–æ—Ä —Ñ–∞–π–ª–∞"""
        file_path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª",
            filetypes=[
                ("–ò—Å–ø–æ–ª–Ω—è–µ–º—ã–µ —Ñ–∞–π–ª—ã", "*.exe"),
                ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")
            ]
        )
        
        if file_path:
            self.program_path.set(file_path)
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            if not self.program_name.get():
                filename = os.path.splitext(os.path.basename(file_path))[0]
                self.program_name.set(filename)
    
    def add_program(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        name = self.program_name.get().strip()
        path = self.program_path.get().strip()
        description = self.desc_textbox.get("1.0", "end-1c").strip()
        category = self.program_category.get()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if not name:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã!")
            self.name_entry.focus()
            return
            
        if not path:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É—Ç—å –∫ –ø—Ä–æ–≥—Ä–∞–º–º–µ!")
            return
            
        if not os.path.exists(path):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–£–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        new_program = {
            'name': name,
            'path': path,
            'description': description,
            'category': category,
            'date_added': time.strftime("%Y-%m-%d %H:%M:%S")
        }
        
        # –í—ã–∑–æ–≤ callback —Ñ—É–Ω–∫—Ü–∏–∏
        self.callback(new_program)
        self.window.destroy()
    
    def cancel(self):
        """–û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"""
        self.window.destroy()

class SettingsWindow:
    def __init__(self, parent, current_settings, callback):
        self.parent = parent
        self.current_settings = current_settings
        self.callback = callback
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞
        self.window = ctk.CTkToplevel(parent)
        self.window.title("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        self.window.geometry("750x700")
        self.window.resizable(False, False)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        self.window.transient(parent)
        self.window.grab_set()
        self.window.focus_set()
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
        self.center_window()
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.auto_start = tk.BooleanVar(value=current_settings.get('auto_start', False))
        self.minimize_to_tray = tk.BooleanVar(value=current_settings.get('minimize_to_tray', True))
        self.show_notifications = tk.BooleanVar(value=current_settings.get('show_notifications', True))
        self.theme_mode = tk.StringVar(value=current_settings.get('theme_mode', 'dark'))
        self.window_size = tk.StringVar(value=current_settings.get('window_size', '1000x700'))
        
        # –ù–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
        self.tile_size = tk.StringVar(value=current_settings.get('tile_size', 'medium'))
        self.color_scheme = tk.StringVar(value=current_settings.get('color_scheme', 'blue'))
        self.columns_count = tk.StringVar(value=current_settings.get('columns_count', '3'))
        self.show_statistics = tk.BooleanVar(value=current_settings.get('show_statistics', True))
        self.track_usage = tk.BooleanVar(value=current_settings.get('track_usage', True))
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_widgets()
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        self.theme_mode.trace("w", self.apply_theme)
        self.window_size.trace("w", self.apply_window_size)
        
    def center_window(self):
        """–¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞"""
        self.window.update_idletasks()
        width = self.window.winfo_width()
        height = self.window.winfo_height()
        x = (self.window.winfo_screenwidth() // 2) - (width // 2)
        y = (self.window.winfo_screenheight() // 2) - (height // 2)
        self.window.geometry(f"{width}x{height}+{x}+{y}")
        
    def apply_theme(self, *args):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        theme = self.theme_mode.get()
        if theme == "system":
            ctk.set_appearance_mode("system")
        else:
            ctk.set_appearance_mode(theme)
        
    def apply_window_size(self, *args):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        size = self.window_size.get()
        if size and "x" in size:
            try:
                width, height = map(int, size.split("x"))
                self.parent.geometry(f"{width}x{height}")
                # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
                self.parent.update_idletasks()
                x = (self.parent.winfo_screenwidth() // 2) - (width // 2)
                y = (self.parent.winfo_screenheight() // 2) - (height // 2)
                self.parent.geometry(f"{width}x{height}+{x}+{y}")
            except ValueError:
                pass
    
    def on_size_change(self, choice):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞"""
        if choice and "x" in choice:
            try:
                width, height = map(int, choice.split("x"))
                self.parent.geometry(f"{width}x{height}")
                # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
                self.parent.update_idletasks()
                x = (self.parent.winfo_screenwidth() // 2) - (width // 2)
                y = (self.parent.winfo_screenheight() // 2) - (height // 2)
                self.parent.geometry(f"{width}x{height}+{x}+{y}")
            except ValueError:
                pass
    
    def on_tile_size_change(self, choice):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –ø–ª–∏—Ç–æ–∫"""
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –æ–∫–Ω—É
        if hasattr(self.parent, 'apply_tile_size'):
            self.parent.apply_tile_size(choice)
    
    def on_color_scheme_change(self, choice):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ö–µ–º—ã"""
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –æ–∫–Ω—É
        if hasattr(self.parent, 'apply_color_scheme'):
            self.parent.apply_color_scheme(choice)
    
    def on_columns_change(self, choice):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–ª–æ–Ω–æ–∫"""
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –æ–∫–Ω—É
        if hasattr(self.parent, 'apply_columns_count'):
            self.parent.apply_columns_count(int(choice))
    
    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
        main_frame = ctk.CTkFrame(self.window, fg_color="#1a1a1a")
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = ctk.CTkFrame(main_frame, fg_color="#2d2d2d", corner_radius=10)
        header_frame.pack(fill="x", padx=20, pady=(20, 10))
        
        title_label = ctk.CTkLabel(
            header_frame,
            text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
            font=ctk.CTkFont(size=24, weight="bold"),
            text_color="#FFD700"
        )
        title_label.pack(pady=20)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
        self.tabview = ctk.CTkTabview(main_frame, fg_color="#2d2d2d", corner_radius=10)
        self.tabview.pack(fill="both", expand=True, padx=20, pady=10)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
        self.tabview.add("–û–±—â–∏–µ")
        self.tabview.add("–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
        self.tabview.add("–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è")
        self.tabview.add("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        self.tabview.add("–û–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        self.tabview.add("–û –ø—Ä–æ–≥—Ä–∞–º–º–µ")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤–∫–ª–∞–¥–æ–∫
        self.create_general_tab(self.tabview.tab("–û–±—â–∏–µ"))
        self.create_interface_tab(self.tabview.tab("–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å"))
        self.create_personalization_tab(self.tabview.tab("–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è"))
        self.create_notifications_tab(self.tabview.tab("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"))
        self.create_updates_tab(self.tabview.tab("–û–±–Ω–æ–≤–ª–µ–Ω–∏—è"))
        self.create_about_tab(self.tabview.tab("–û –ø—Ä–æ–≥—Ä–∞–º–º–µ"))
        
        # –ö–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É –æ–∫–Ω–∞
        self.create_bottom_buttons(main_frame)
        
    def create_bottom_buttons(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤–Ω–∏–∑—É –æ–∫–Ω–∞"""
        buttons_frame = ctk.CTkFrame(parent, fg_color="transparent")
        buttons_frame.pack(fill="x", padx=20, pady=20, side="bottom")
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
        cancel_button = ctk.CTkButton(
            buttons_frame,
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            command=self.cancel,
            font=ctk.CTkFont(size=14, weight="bold"),
            height=45,
            fg_color="#F44336",
            hover_color="#D32F2F",
            corner_radius=22
        )
        cancel_button.pack(side="left", padx=(0, 10), expand=True)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        save_button = ctk.CTkButton(
            buttons_frame,
            text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
            command=self.save_settings,
            font=ctk.CTkFont(size=14, weight="bold"),
            height=45,
            fg_color="#4CAF50",
            hover_color="#45a049",
            corner_radius=22
        )
        save_button.pack(side="right", padx=(10, 0), expand=True)
        
    def create_general_tab(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –æ–±—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        # –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫
        auto_start_frame = ctk.CTkFrame(parent)
        auto_start_frame.pack(fill="x", padx=20, pady=10)
        
        auto_start_label = ctk.CTkLabel(
            auto_start_frame,
            text="üöÄ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–∏—Å—Ç–µ–º—ã",
            font=ctk.CTkFont(size=16, weight="bold")
        )
        auto_start_label.pack(anchor="w", padx=20, pady=(15, 5))
        
        auto_start_desc = ctk.CTkLabel(
            auto_start_frame,
            text="–õ–∞—É–Ω—á–µ—Ä –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞",
            font=ctk.CTkFont(size=12),
            text_color="gray"
        )
        auto_start_desc.pack(anchor="w", padx=20, pady=(0, 15))
        
        auto_start_switch = ctk.CTkSwitch(
            auto_start_frame,
            text="–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫",
            variable=self.auto_start,
            font=ctk.CTkFont(size=14)
        )
        auto_start_switch.pack(anchor="w", padx=20, pady=(0, 15))
        
        # –°–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –≤ —Ç—Ä–µ–π
        tray_frame = ctk.CTkFrame(parent)
        tray_frame.pack(fill="x", padx=20, pady=10)
        
        tray_label = ctk.CTkLabel(
            tray_frame,
            text="üì± –°–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ç—Ä–µ–π",
            font=ctk.CTkFont(size=16, weight="bold")
        )
        tray_label.pack(anchor="w", padx=20, pady=(15, 5))
        
        tray_desc = ctk.CTkLabel(
            tray_frame,
            text="–ü—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ–∫–Ω–∞ –ª–∞—É–Ω—á–µ—Ä –±—É–¥–µ—Ç —Å–≤–æ—Ä–∞—á–∏–≤–∞—Ç—å—Å—è –≤ —Ç—Ä–µ–π",
            font=ctk.CTkFont(size=12),
            text_color="gray"
        )
        tray_desc.pack(anchor="w", padx=20, pady=(0, 15))
        
        tray_switch = ctk.CTkSwitch(
            tray_frame,
            text="–í–∫–ª—é—á–∏—Ç—å —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –≤ —Ç—Ä–µ–π",
            variable=self.minimize_to_tray,
            font=ctk.CTkFont(size=14)
        )
        tray_switch.pack(anchor="w", padx=20, pady=(0, 15))
        
    def create_interface_tab(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –¢–µ–º–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
        theme_frame = ctk.CTkFrame(parent)
        theme_frame.pack(fill="x", padx=20, pady=10)
        
        theme_label = ctk.CTkLabel(
            theme_frame,
            text="üé® –¢–µ–º–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è",
            font=ctk.CTkFont(size=16, weight="bold")
        )
        theme_label.pack(anchor="w", padx=20, pady=(15, 5))
        
        theme_desc = ctk.CTkLabel(
            theme_frame,
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞",
            font=ctk.CTkFont(size=12),
            text_color="gray"
        )
        theme_desc.pack(anchor="w", padx=20, pady=(0, 10))
        
        theme_menu = ctk.CTkOptionMenu(
            theme_frame,
            values=["dark", "light", "system"],
            variable=self.theme_mode,
            font=ctk.CTkFont(size=14),
            height=40,
            command=self.on_theme_change
        )
        theme_menu.pack(anchor="w", padx=20, pady=(0, 15))
        
        # –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞
        size_frame = ctk.CTkFrame(parent)
        size_frame.pack(fill="x", padx=20, pady=10)
        
        size_label = ctk.CTkLabel(
            size_frame,
            text="üìê –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é",
            font=ctk.CTkFont(size=16, weight="bold")
        )
        size_label.pack(anchor="w", padx=20, pady=(15, 5))
        
        size_desc = ctk.CTkLabel(
            size_frame,
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ –ª–∞—É–Ω—á–µ—Ä–∞",
            font=ctk.CTkFont(size=12),
            text_color="gray"
        )
        size_desc.pack(anchor="w", padx=20, pady=(0, 10))
        
        size_menu = ctk.CTkOptionMenu(
            size_frame,
            values=["800x600", "1000x700", "1200x800", "1400x900"],
            variable=self.window_size,
            font=ctk.CTkFont(size=14),
            height=40,
            command=self.on_size_change
        )
        size_menu.pack(anchor="w", padx=20, pady=(0, 15))
        
    def create_personalization_tab(self, parent):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        scroll_frame = ctk.CTkScrollableFrame(parent)
        scroll_frame.pack(fill="both", expand=True, padx=10, pady=10)

        # –î–∞–ª–µ–µ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–æ–±–∞–≤–ª—è–µ–º –≤ scroll_frame, –∞ –Ω–µ –≤ parent
        tile_frame = ctk.CTkFrame(scroll_frame)
        tile_frame.pack(fill="x", padx=20, pady=10)
        
        tile_label = ctk.CTkLabel(
            tile_frame,
            text="üìè –†–∞–∑–º–µ—Ä –ø–ª–∏—Ç–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º",
            font=ctk.CTkFont(size=16, weight="bold")
        )
        tile_label.pack(anchor="w", padx=20, pady=(15, 5))
        
        tile_desc = ctk.CTkLabel(
            tile_frame,
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –ø–ª–∏—Ç–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º",
            font=ctk.CTkFont(size=12),
            text_color="gray"
        )
        tile_desc.pack(anchor="w", padx=20, pady=(0, 10))
        
        tile_menu = ctk.CTkOptionMenu(
            tile_frame,
            values=["small", "medium", "large"],
            variable=self.tile_size,
            font=ctk.CTkFont(size=14),
            height=40,
            command=self.on_tile_size_change
        )
        tile_menu.pack(anchor="w", padx=20, pady=(0, 15))
        
        # –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞
        color_frame = ctk.CTkFrame(scroll_frame)
        color_frame.pack(fill="x", padx=20, pady=10)
        
        color_label = ctk.CTkLabel(
            color_frame,
            text="üé® –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞",
            font=ctk.CTkFont(size=16, weight="bold")
        )
        color_label.pack(anchor="w", padx=20, pady=(15, 5))
        
        color_desc = ctk.CTkLabel(
            color_frame,
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞",
            font=ctk.CTkFont(size=12),
            text_color="gray"
        )
        color_desc.pack(anchor="w", padx=20, pady=(0, 10))
        
        color_menu = ctk.CTkOptionMenu(
            color_frame,
            values=["blue", "green", "purple", "orange", "red"],
            variable=self.color_scheme,
            font=ctk.CTkFont(size=14),
            height=40,
            command=self.on_color_scheme_change
        )
        color_menu.pack(anchor="w", padx=20, pady=(0, 15))
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫
        columns_frame = ctk.CTkFrame(scroll_frame)
        columns_frame.pack(fill="x", padx=20, pady=10)
        
        columns_label = ctk.CTkLabel(
            columns_frame,
            text="üìê –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫",
            font=ctk.CTkFont(size=16, weight="bold")
        )
        columns_label.pack(anchor="w", padx=20, pady=(15, 5))
        
        columns_desc = ctk.CTkLabel(
            columns_frame,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫ –≤ —Å–µ—Ç–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º",
            font=ctk.CTkFont(size=12),
            text_color="gray"
        )
        columns_desc.pack(anchor="w", padx=20, pady=(0, 10))
        
        columns_menu = ctk.CTkOptionMenu(
            columns_frame,
            values=["2", "3", "4", "5"],
            variable=self.columns_count,
            font=ctk.CTkFont(size=14),
            height=40,
            command=self.on_columns_change
        )
        columns_menu.pack(anchor="w", padx=20, pady=(0, 15))
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        stats_frame = ctk.CTkFrame(scroll_frame)
        stats_frame.pack(fill="x", padx=20, pady=10)
        
        stats_label = ctk.CTkLabel(
            stats_frame,
            text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
            font=ctk.CTkFont(size=16, weight="bold")
        )
        stats_label.pack(anchor="w", padx=20, pady=(15, 5))
        
        stats_desc = ctk.CTkLabel(
            stats_frame,
            text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º",
            font=ctk.CTkFont(size=12),
            text_color="gray"
        )
        stats_desc.pack(anchor="w", padx=20, pady=(0, 15))
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        track_switch = ctk.CTkSwitch(
            stats_frame,
            text="–û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º",
            variable=self.track_usage,
            font=ctk.CTkFont(size=14)
        )
        track_switch.pack(anchor="w", padx=20, pady=(0, 10))
        
        show_stats_switch = ctk.CTkSwitch(
            stats_frame,
            text="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ",
            variable=self.show_statistics,
            font=ctk.CTkFont(size=14)
        )
        show_stats_switch.pack(anchor="w", padx=20, pady=(0, 15))
        
    def on_theme_change(self, choice):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã"""
        if choice == "system":
            ctk.set_appearance_mode("system")
        else:
            ctk.set_appearance_mode(choice)
    
    def create_notifications_tab(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        notif_frame = ctk.CTkFrame(parent)
        notif_frame.pack(fill="x", padx=20, pady=10)
        
        notif_label = ctk.CTkLabel(
            notif_frame,
            text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
            font=ctk.CTkFont(size=16, weight="bold")
        )
        notif_label.pack(anchor="w", padx=20, pady=(15, 5))
        
        notif_desc = ctk.CTkLabel(
            notif_frame,
            text="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º –∏ –¥—Ä—É–≥–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö",
            font=ctk.CTkFont(size=12),
            text_color="gray"
        )
        notif_desc.pack(anchor="w", padx=20, pady=(0, 15))
        
        notif_switch = ctk.CTkSwitch(
            notif_frame,
            text="–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
            variable=self.show_notifications,
            font=ctk.CTkFont(size=14)
        )
        notif_switch.pack(anchor="w", padx=20, pady=(0, 15))
        
    def create_about_tab(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ"""
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ
        info_frame = ctk.CTkFrame(parent)
        info_frame.pack(fill="both", expand=True, padx=20, pady=10)
        
        # –õ–æ–≥–æ—Ç–∏–ø
        logo_label = ctk.CTkLabel(
            info_frame,
            text="üöÄ",
            font=ctk.CTkFont(size=48)
        )
        logo_label.pack(pady=(30, 10))
        
        # –ù–∞–∑–≤–∞–Ω–∏–µ
        name_label = ctk.CTkLabel(
            info_frame,
            text="–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –õ–∞—É–Ω—á–µ—Ä –ü—Ä–æ–≥—Ä–∞–º–º",
            font=ctk.CTkFont(size=20, weight="bold")
        )
        name_label.pack(pady=(0, 5))
        
        # –í–µ—Ä—Å–∏—è
        version_label = ctk.CTkLabel(
            info_frame,
            text="–í–µ—Ä—Å–∏—è 2.0",
            font=ctk.CTkFont(size=14),
            text_color="gray"
        )
        version_label.pack(pady=(0, 20))
        
        # –û–ø–∏—Å–∞–Ω–∏–µ
        desc_text = """
        –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ª–∞—É–Ω—á–µ—Ä –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º
        —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º.
        
        –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
        ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏
        ‚Ä¢ –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
        ‚Ä¢ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω
        ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è
        ‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫
        
        –†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Python –∏ CustomTkinter
        """
        
        desc_label = ctk.CTkLabel(
            info_frame,
            text=desc_text,
            font=ctk.CTkFont(size=12),
            justify="left"
        )
        desc_label.pack(pady=20)
        
        # –ö–Ω–æ–ø–∫–∏
        buttons_frame = ctk.CTkFrame(info_frame, fg_color="transparent")
        buttons_frame.pack(fill="x", padx=20, pady=20)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        action_buttons = [
            ("üìß –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "#4169E1"),
            ("üåê –í–µ–±-—Å–∞–π—Ç", "#2E8B57"),
            ("üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", "#FF8C00")
        ]
        
        for text, color in action_buttons:
            if text == "üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è":
                btn = ctk.CTkButton(
                    buttons_frame,
                    text=text,
                    font=ctk.CTkFont(size=12),
                    height=35,
                    fg_color=color,
                    hover_color=color,
                    command=lambda: DocumentationWindow(self.window)
                )
            else:
                btn = ctk.CTkButton(
                    buttons_frame,
                    text=text,
                    font=ctk.CTkFont(size=12),
                    height=35,
                    fg_color=color,
                    hover_color=color
                )
            btn.pack(side="left", padx=5, expand=True)
    
    def save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        settings = {
            'auto_start': self.auto_start.get(),
            'minimize_to_tray': self.minimize_to_tray.get(),
            'show_notifications': self.show_notifications.get(),
            'theme_mode': self.theme_mode.get(),
            'window_size': self.window_size.get(),
            'tile_size': self.tile_size.get(),
            'color_scheme': self.color_scheme.get(),
            'columns_count': self.columns_count.get(),
            'show_statistics': self.show_statistics.get(),
            'track_usage': self.track_usage.get(),
            'check_updates': self.check_updates_var.get()
        }
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –≥–ª–∞–≤–Ω–æ–º—É –æ–∫–Ω—É
        self.apply_settings_to_main_window(settings)
        
        # –í—ã–∑—ã–≤–∞–µ–º callback –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        self.callback(settings)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
        messagebox.showinfo(
            "–£—Å–ø–µ—Ö",
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! ‚úÖ"
        )
        
        self.window.destroy()
    
    def apply_settings_to_main_window(self, settings):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ –≥–ª–∞–≤–Ω–æ–º—É –æ–∫–Ω—É"""
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É
        theme = settings.get('theme_mode', 'dark')
        if theme == "system":
            ctk.set_appearance_mode("system")
        else:
            ctk.set_appearance_mode(theme)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
        size = settings.get('window_size', '1000x700')
        if size and "x" in size:
            try:
                width, height = map(int, size.split("x"))
                self.parent.geometry(f"{width}x{height}")
                # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
                self.center_window()
            except ValueError:
                pass
    
    def cancel(self):
        """–û—Ç–º–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞"""
        self.window.destroy()
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ —Å Windows
    def create_updates_tab(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        scrollable_frame = ctk.CTkScrollableFrame(parent, fg_color="#2d2d2d", corner_radius=10)
        scrollable_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ctk.CTkLabel(
            scrollable_frame,
            text="üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π",
            font=ctk.CTkFont(size=20, weight="bold"),
            text_color="#FFD700"
        )
        title_label.pack(pady=(0, 20))
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏
        version_frame = ctk.CTkFrame(scrollable_frame, fg_color="#3d3d3d", corner_radius=8)
        version_frame.pack(fill="x", padx=20, pady=10)
        
        version_label = ctk.CTkLabel(
            version_frame,
            text=f"–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {CURRENT_VERSION}",
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color="#FFFFFF"
        )
        version_label.pack(pady=15)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        updates_frame = ctk.CTkFrame(scrollable_frame, fg_color="#3d3d3d", corner_radius=8)
        updates_frame.pack(fill="x", padx=20, pady=10)
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        check_updates_var = tk.BooleanVar(value=self.current_settings.get('check_updates', True))
        
        check_updates_switch = ctk.CTkSwitch(
            updates_frame,
            text="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ",
            variable=check_updates_var,
            font=ctk.CTkFont(size=14),
            fg_color="#4CAF50",
            progress_color="#45a049"
        )
        check_updates_switch.pack(pady=15, padx=20)
        
        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        check_button = ctk.CTkButton(
            updates_frame,
            text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ–π—á–∞—Å",
            command=self.check_updates_now,
            font=ctk.CTkFont(size=14, weight="bold"),
            height=40,
            fg_color="#2196F3",
            hover_color="#1976D2",
            corner_radius=20
        )
        check_button.pack(pady=15, padx=20)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        self.check_updates_var = check_updates_var
    
    def check_updates_now(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å"""
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π UpdateManager –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        update_manager = UpdateManager(self.window)
        update_manager.check_for_updates(silent=False)

class EditProgramWindow:
    def __init__(self, parent, program, callback):
        self.parent = parent
        self.program = program
        self.callback = callback
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞
        self.window = ctk.CTkToplevel(parent)
        self.window.title("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É")
        self.window.geometry("700x700")
        self.window.resizable(False, False)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        self.window.transient(parent)
        self.window.grab_set()
        self.window.focus_set()
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
        self.center_window()
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.program_name = tk.StringVar(value=program.get('name', ''))
        self.program_path = tk.StringVar(value=program.get('path', ''))
        self.program_description = tk.StringVar(value=program.get('description', ''))
        self.program_category = tk.StringVar(value=program.get('category', '–û–±—â–∏–µ'))
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_widgets()
        
        # –§–æ–∫—É—Å –Ω–∞ –ø–µ—Ä–≤–æ–µ –ø–æ–ª–µ
        self.name_entry.focus()
        
    def center_window(self):
        """–¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞"""
        self.window.update_idletasks()
        width = self.window.winfo_width()
        height = self.window.winfo_height()
        x = (self.window.winfo_screenwidth() // 2) - (width // 2)
        y = (self.window.winfo_screenheight() // 2) - (height // 2)
        self.window.geometry(f"{width}x{height}+{x}+{y}")
        
    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
        main_container = ctk.CTkFrame(self.window, fg_color="#1a1a1a")
        main_container.pack(fill="both", expand=True, padx=20, pady=20)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = ctk.CTkFrame(main_container, fg_color="#2d2d2d", corner_radius=10)
        header_frame.pack(fill="x", padx=20, pady=(20, 10))
        
        title_label = ctk.CTkLabel(
            header_frame,
            text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É",
            font=ctk.CTkFont(size=24, weight="bold"),
            text_color="#FFD700"
        )
        title_label.pack(pady=20)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —Ñ–æ—Ä–º–∞
        form_container = ctk.CTkScrollableFrame(main_container, fg_color="#2d2d2d", corner_radius=10)
        form_container.pack(fill="both", expand=True, padx=20, pady=10)
        
        # –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        name_frame = ctk.CTkFrame(form_container, fg_color="#3d3d3d", corner_radius=8)
        name_frame.pack(fill="x", padx=20, pady=10)
        
        name_label = ctk.CTkLabel(
            name_frame,
            text="üìù –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã",
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color="#FFFFFF"
        )
        name_label.pack(anchor="w", padx=20, pady=(15, 5))
        
        self.name_entry = ctk.CTkEntry(
            name_frame,
            textvariable=self.program_name,
            placeholder_text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã...",
            font=ctk.CTkFont(size=14),
            height=45,
            fg_color="#4d4d4d",
            border_color="#5d5d5d",
            corner_radius=8
        )
        self.name_entry.pack(fill="x", padx=20, pady=(0, 15))
        
        # –ü—É—Ç—å –∫ –ø—Ä–æ–≥—Ä–∞–º–º–µ
        path_frame = ctk.CTkFrame(form_container, fg_color="#3d3d3d", corner_radius=8)
        path_frame.pack(fill="x", padx=20, pady=10)
        
        path_label = ctk.CTkLabel(
            path_frame,
            text="üìÅ –ü—É—Ç—å –∫ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–º—É —Ñ–∞–π–ª—É",
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color="#FFFFFF"
        )
        path_label.pack(anchor="w", padx=20, pady=(15, 5))
        
        path_input_frame = ctk.CTkFrame(path_frame, fg_color="transparent")
        path_input_frame.pack(fill="x", padx=20, pady=(0, 15))
        
        self.path_entry = ctk.CTkEntry(
            path_input_frame,
            textvariable=self.program_path,
            placeholder_text="–í—ã–±–µ—Ä–∏—Ç–µ .exe —Ñ–∞–π–ª...",
            font=ctk.CTkFont(size=14),
            height=45,
            fg_color="#4d4d4d",
            border_color="#5d5d5d",
            corner_radius=8
        )
        self.path_entry.pack(side="left", fill="x", expand=True, padx=(0, 10))
        
        browse_button = ctk.CTkButton(
            path_input_frame,
            text="üìÇ –û–±–∑–æ—Ä",
            command=self.browse_file,
            font=ctk.CTkFont(size=12, weight="bold"),
            width=100,
            height=45,
            fg_color="#2196F3",
            hover_color="#1976D2",
            corner_radius=8
        )
        browse_button.pack(side="right")
        
        # –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        desc_frame = ctk.CTkFrame(form_container, fg_color="#3d3d3d", corner_radius=8)
        desc_frame.pack(fill="x", padx=20, pady=10)
        
        desc_label = ctk.CTkLabel(
            desc_frame,
            text="üìÑ –û–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)",
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color="#FFFFFF"
        )
        desc_label.pack(anchor="w", padx=20, pady=(15, 5))
        
        self.desc_textbox = ctk.CTkTextbox(
            desc_frame,
            height=80,
            font=ctk.CTkFont(size=12),
            fg_color="#4d4d4d",
            border_color="#5d5d5d",
            corner_radius=8
        )
        self.desc_textbox.pack(fill="x", padx=20, pady=(0, 15))
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        if self.program.get('description'):
            self.desc_textbox.insert("1.0", self.program.get('description'))
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏—è
        category_frame = ctk.CTkFrame(form_container, fg_color="#3d3d3d", corner_radius=8)
        category_frame.pack(fill="x", padx=20, pady=10)
        
        category_label = ctk.CTkLabel(
            category_frame,
            text="üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è",
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color="#FFFFFF"
        )
        category_label.pack(anchor="w", padx=20, pady=(15, 5))
        
        categories = ["–û–±—â–∏–µ", "–ò–≥—Ä—ã", "–†–∞–±–æ—Ç–∞", "–ú—É–ª—å—Ç–∏–º–µ–¥–∏–∞", "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç", "–£—Ç–∏–ª–∏—Ç—ã", "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞"]
        self.category_menu = ctk.CTkOptionMenu(
            category_frame,
            values=categories,
            variable=self.program_category,
            font=ctk.CTkFont(size=14),
            height=45,
            fg_color="#4d4d4d",
            button_color="#5d5d5d",
            button_hover_color="#6d6d6d",
            corner_radius=8
        )
        self.category_menu.pack(fill="x", padx=20, pady=(0, 15))
        
        # –ö–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É –æ–∫–Ω–∞
        self.create_bottom_buttons(main_container)
        
    def create_bottom_buttons(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤–Ω–∏–∑—É –æ–∫–Ω–∞"""
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤–Ω–µ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º–æ–π –æ–±–ª–∞—Å—Ç–∏
        buttons_frame = ctk.CTkFrame(parent, fg_color="transparent")
        buttons_frame.pack(fill="x", padx=20, pady=20, side="bottom")
        
        cancel_button = ctk.CTkButton(
            buttons_frame,
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            command=self.cancel,
            font=ctk.CTkFont(size=14, weight="bold"),
            height=45,
            fg_color="#F44336",
            hover_color="#D32F2F",
            corner_radius=22
        )
        cancel_button.pack(side="left", padx=(0, 10), expand=True)
        
        save_button = ctk.CTkButton(
            buttons_frame,
            text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è",
            command=self.save_changes,
            font=ctk.CTkFont(size=14, weight="bold"),
            height=45,
            fg_color="#4CAF50",
            hover_color="#45a049",
            corner_radius=22
        )
        save_button.pack(side="right", padx=(10, 0), expand=True)
        
    def browse_file(self):
        """–í—ã–±–æ—Ä —Ñ–∞–π–ª–∞"""
        file_path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª",
            filetypes=[
                ("–ò—Å–ø–æ–ª–Ω—è–µ–º—ã–µ —Ñ–∞–π–ª—ã", "*.exe"),
                ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")
            ]
        )
        
        if file_path:
            self.program_path.set(file_path)
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            if not self.program_name.get():
                filename = os.path.splitext(os.path.basename(file_path))[0]
                self.program_name.set(filename)
    
    def save_changes(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        name = self.program_name.get().strip()
        path = self.program_path.get().strip()
        description = self.desc_textbox.get("1.0", "end-1c").strip()
        category = self.program_category.get()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if not name:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã!")
            self.name_entry.focus()
            return
            
        if not path:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É—Ç—å –∫ –ø—Ä–æ–≥—Ä–∞–º–º–µ!")
            return
            
        if not os.path.exists(path):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–£–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        updated_program = {
            'name': name,
            'path': path,
            'description': description,
            'category': category,
            'date_modified': time.strftime("%Y-%m-%d %H:%M:%S")
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if 'date_added' in self.program:
            updated_program['date_added'] = self.program['date_added']
        
        # –í—ã–∑–æ–≤ callback —Ñ—É–Ω–∫—Ü–∏–∏
        self.callback(updated_program)
        self.window.destroy()
    
    def cancel(self):
        """–û—Ç–º–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        self.window.destroy()

def get_program_icon(path):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏–∑ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞"""
    try:
        # –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - —Å–æ–∑–¥–∞–µ–º –∏–∫–æ–Ω–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        file_ext = os.path.splitext(path)[1].lower()
        
        # –°–æ–∑–¥–∞–µ–º —Ü–≤–µ—Ç–Ω—É—é –∏–∫–æ–Ω–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
        if file_ext == '.exe':
            color = (70, 130, 180)  # –°–∏–Ω–∏–π
        elif file_ext == '.msi':
            color = (255, 140, 0)   # –û—Ä–∞–Ω–∂–µ–≤—ã–π
        elif file_ext == '.lnk':
            color = (255, 215, 0)   # –ó–æ–ª–æ—Ç–æ–π
        else:
            color = (128, 128, 128) # –°–µ—Ä—ã–π
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        img = Image.new('RGBA', (32, 32), color + (255,))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–π —É–∑–æ—Ä
        for i in range(8, 24):
            for j in range(8, 24):
                if (i + j) % 2 == 0:
                    img.putpixel((i, j), (255, 255, 255, 100))
        
        return ImageTk.PhotoImage(img)
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–∫–æ–Ω–∫–∏ –¥–ª—è {path}: {e}")
        return None
    
    return None

def create_default_icon():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –∏–∫–æ–Ω–∫–∏"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∏–∫–æ–Ω–∫—É
        img = Image.new('RGBA', (32, 32), (70, 130, 180, 255))
        return ImageTk.PhotoImage(img)
    except:
        return None

class ModernProgramLauncher:
    def __init__(self):
        # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π —Ç–µ–º—ã
        self.settings_file = "settings.json"
        self.settings = self.load_settings()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        theme_mode = self.settings.get('theme_mode', 'dark')
        if theme_mode == "system":
            ctk.set_appearance_mode("system")
        else:
            ctk.set_appearance_mode(theme_mode)
        ctk.set_default_color_theme("blue")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        self.root = ctk.CTk()
        self.root.title("üöÄ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –õ–∞—É–Ω—á–µ—Ä –ü—Ä–æ–≥—Ä–∞–º–º")
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        window_size = self.settings.get('window_size', '1000x700')
        self.root.geometry(window_size)
        self.root.resizable(True, True)
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
        self.center_window()
        
        # –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        self.programs_file = "programs.json"
        self.programs = self.load_programs()
        
        # –°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        self.usage_file = "usage_stats.json"
        self.usage_stats = self.load_usage_stats()
        self.active_programs = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞
        self.search_var = tk.StringVar()
        self.search_var.trace("w", self.filter_programs)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_widgets()
        
        # –ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏
        self.loading_animation()
        
        # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        if self.settings.get('track_usage', True):
            self.start_usage_tracking()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        self.update_manager = UpdateManager(self.root)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ (—Ç–∏—Ö–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
        if self.settings.get('check_updates', True):
            self.update_manager.check_for_updates(silent=True)
    
    def center_window(self):
        """–¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ"""
        self.root.update_idletasks()
        width = self.root.winfo_width()
        height = self.root.winfo_height()
        x = (self.root.winfo_screenwidth() // 2) - (width // 2)
        y = (self.root.winfo_screenheight() // 2) - (height // 2)
        self.root.geometry(f"{width}x{height}+{x}+{y}")
        
    def loading_animation(self):
        """–ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏"""
        def animate():
            dots = ["", ".", "..", "..."]
            for i in range(4):
                self.root.title(f"üöÄ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –õ–∞—É–Ω—á–µ—Ä –ü—Ä–æ–≥—Ä–∞–º–º {dots[i]}")
                time.sleep(0.2)
            self.root.title("üöÄ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –õ–∞—É–Ω—á–µ—Ä –ü—Ä–æ–≥—Ä–∞–º–º")
        
        threading.Thread(target=animate, daemon=True).start()
        
    def load_programs(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º –∏–∑ —Ñ–∞–π–ª–∞"""
        if os.path.exists(self.programs_file):
            try:
                with open(self.programs_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except:
                return []
        return []
    
    def save_programs(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º –≤ —Ñ–∞–π–ª"""
        with open(self.programs_file, 'w', encoding='utf-8') as f:
            json.dump(self.programs, f, ensure_ascii=False, indent=2)
    
    def load_settings(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        if os.path.exists(self.settings_file):
            try:
                with open(self.settings_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except:
                return self.get_default_settings()
        return self.get_default_settings()
    
    def save_settings(self, settings):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        self.settings = settings
        with open(self.settings_file, 'w', encoding='utf-8') as f:
            json.dump(settings, f, ensure_ascii=False, indent=2)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –≥–ª–∞–≤–Ω–æ–º—É –æ–∫–Ω—É
        self.apply_settings(settings)
    
    def apply_settings(self, settings):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ –≥–ª–∞–≤–Ω–æ–º—É –æ–∫–Ω—É"""
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É
        theme = settings.get('theme_mode', 'dark')
        if theme == "system":
            ctk.set_appearance_mode("system")
        else:
            ctk.set_appearance_mode(theme)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
        size = settings.get('window_size', '1000x700')
        if size and "x" in size:
            try:
                width, height = map(int, size.split("x"))
                self.root.geometry(f"{width}x{height}")
                # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
                self.center_window()
            except ValueError:
                pass
    
    def get_default_settings(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        return {
            'auto_start': False,
            'minimize_to_tray': True,
            'show_notifications': True,
            'theme_mode': 'dark',
            'window_size': '1000x700',
            'check_updates': True
        }
    
    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–º —ç—Ñ—Ñ–µ–∫—Ç–æ–º
        main_container = ctk.CTkFrame(self.root, fg_color="#1a1a1a", corner_radius=0)
        main_container.pack(fill="both", expand=True)
        
        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏ –ø–æ–∏—Å–∫–æ–º
        self.create_modern_header(main_container)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å —Å –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏
        self.create_modern_programs_area(main_container)
        
        # –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.create_modern_footer(main_container)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º
        self.update_program_cards()
        
    def create_modern_header(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –≤–µ—Ä—Ö–Ω–µ–π –ø–∞–Ω–µ–ª–∏"""
        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
        header_frame = ctk.CTkFrame(parent, fg_color="#2d2d2d", corner_radius=0, height=80)
        header_frame.pack(fill="x", padx=0, pady=0)
        header_frame.pack_propagate(False)
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        header_content = ctk.CTkFrame(header_frame, fg_color="transparent")
        header_content.pack(fill="both", expand=True, padx=30, pady=15)
        
        # –õ–µ–≤–∞—è —á–∞—Å—Ç—å - –ª–æ–≥–æ—Ç–∏–ø –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
        left_section = ctk.CTkFrame(header_content, fg_color="transparent")
        left_section.pack(side="left", fill="y")
        
        # –õ–æ–≥–æ—Ç–∏–ø –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
        logo_frame = ctk.CTkFrame(left_section, fg_color="transparent")
        logo_frame.pack(side="left")
        
        logo_label = ctk.CTkLabel(
            logo_frame,
            text="üöÄ",
            font=ctk.CTkFont(size=32),
            text_color="#FFD700"
        )
        logo_label.pack(side="left", padx=(0, 10))
        
        title_label = ctk.CTkLabel(
            logo_frame,
            text="Cursor Launcher",
            font=ctk.CTkFont(size=24, weight="bold"),
            text_color="#FFFFFF"
        )
        title_label.pack(side="left")
        
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å - –ø–æ–∏—Å–∫
        center_section = ctk.CTkFrame(header_content, fg_color="transparent")
        center_section.pack(side="left", fill="x", expand=True, padx=30)
        
        # –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞ —Å –∏–∫–æ–Ω–∫–æ–π
        search_frame = ctk.CTkFrame(center_section, fg_color="#3d3d3d", corner_radius=25, height=45)
        search_frame.pack(fill="x", padx=20)
        search_frame.pack_propagate(False)
        
        search_icon = ctk.CTkLabel(
            search_frame,
            text="üîç",
            font=ctk.CTkFont(size=16),
            text_color="#888888"
        )
        search_icon.pack(side="left", padx=(15, 10))
        
        self.search_entry = ctk.CTkEntry(
            search_frame,
            placeholder_text="–ü–æ–∏—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º...",
            font=ctk.CTkFont(size=14),
            fg_color="transparent",
            border_width=0,
            height=45
        )
        self.search_entry.pack(side="left", fill="x", expand=True, padx=(0, 15))
        self.search_entry.bind('<KeyRelease>', self.filter_programs)
        
        # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - –∫–Ω–æ–ø–∫–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        right_section = ctk.CTkFrame(header_content, fg_color="transparent")
        right_section.pack(side="right", fill="y")
        
        # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã
        add_button = ctk.CTkButton(
            right_section,
            text="‚ûï –î–æ–±–∞–≤–∏—Ç—å",
            command=self.show_add_program_window,
            font=ctk.CTkFont(size=14, weight="bold"),
            height=45,
            width=120,
            fg_color="#4CAF50",
            hover_color="#45a049",
            corner_radius=22
        )
        add_button.pack(side="right", padx=(10, 0))
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats_label = ctk.CTkLabel(
            right_section,
            text="üìä 0 –ø—Ä–æ–≥—Ä–∞–º–º",
            font=ctk.CTkFont(size=14, weight="bold"),
            text_color="#87CEEB"
        )
        self.stats_label.pack(side="right", padx=10)
    
    def create_modern_programs_area(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ —Å –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏"""
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        programs_container = ctk.CTkScrollableFrame(
            parent, 
            fg_color="#1a1a1a",
            corner_radius=0
        )
        programs_container.pack(fill="both", expand=True, padx=20, pady=20)
        
        # –°–µ—Ç–∫–∞ –¥–ª—è –ø–ª–∏—Ç–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º
        self.programs_grid = ctk.CTkFrame(programs_container, fg_color="transparent")
        self.programs_grid.pack(fill="both", expand=True, padx=10, pady=10)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ—Å–æ–≤ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        self.programs_grid.grid_columnconfigure(0, weight=1)
        self.programs_grid.grid_columnconfigure(1, weight=1)
        self.programs_grid.grid_columnconfigure(2, weight=1)
        
    def create_modern_footer(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –Ω–∏–∂–Ω–µ–π –ø–∞–Ω–µ–ª–∏"""
        # –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å
        footer_frame = ctk.CTkFrame(parent, fg_color="#2d2d2d", corner_radius=0, height=60)
        footer_frame.pack(fill="x", side="bottom", padx=0, pady=0)
        footer_frame.pack_propagate(False)
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ—É—Ç–µ—Ä–∞
        footer_content = ctk.CTkFrame(footer_frame, fg_color="transparent")
        footer_content.pack(fill="both", expand=True, padx=30, pady=10)
        
        # –õ–µ–≤–∞—è —á–∞—Å—Ç—å - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
        left_footer = ctk.CTkFrame(footer_content, fg_color="transparent")
        left_footer.pack(side="left", fill="y")
        
        system_info = ctk.CTkLabel(
            left_footer,
            text="üíª Windows 10/11 ‚Ä¢ Python 3.8+",
            font=ctk.CTkFont(size=12),
            text_color="#888888"
        )
        system_info.pack(side="left")
        
        # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        right_footer = ctk.CTkFrame(footer_content, fg_color="transparent")
        right_footer.pack(side="right", fill="y")
        
        # –ö–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_button = ctk.CTkButton(
            right_footer,
            text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            command=self.show_statistics_window,
            font=ctk.CTkFont(size=12, weight="bold"),
            height=35,
            width=100,
            fg_color="#2196F3",
            hover_color="#1976D2",
            corner_radius=17
        )
        stats_button.pack(side="right", padx=5)
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        update_button = ctk.CTkButton(
            right_footer,
            text="üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è",
            command=self.show_update_info,
            font=ctk.CTkFont(size=12, weight="bold"),
            height=35,
            width=100,
            fg_color="#FF9800",
            hover_color="#F57C00",
            corner_radius=17
        )
        update_button.pack(side="right", padx=5)
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings_button = ctk.CTkButton(
            right_footer,
            text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
            command=self.show_settings_window,
            font=ctk.CTkFont(size=12, weight="bold"),
            height=35,
            width=100,
            fg_color="#9C27B0",
            hover_color="#7B1FA2",
            corner_radius=17
        )
        settings_button.pack(side="right", padx=5)
    
    def show_add_program_window(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        AddProgramWindow(self.root, self.add_program_callback)
    
    def add_program_callback(self, new_program):
        """Callback –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
        if any(p['name'] == new_program['name'] for p in self.programs):
            messagebox.showerror(
                "–û—à–∏–±–∫–∞",
                "–ü—Ä–æ–≥—Ä–∞–º–º–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!"
            )
            return
        
        self.programs.append(new_program)
        self.save_programs()
        self.update_program_cards()
        
        if self.settings.get('show_notifications', True):
            messagebox.showinfo(
                "–£—Å–ø–µ—Ö",
                f"–ü—Ä–æ–≥—Ä–∞–º–º–∞ '{new_program['name']}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞! üéâ"
            )
    
    def show_statistics_window(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        StatisticsWindow(self.root, self.programs, self.usage_stats, self.active_programs)
        
    def show_settings_window(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        SettingsWindow(self.root, self.settings, self.save_settings)
    
    def filter_programs(self, event=None):
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É"""
        self.update_program_cards()
        
    def get_filtered_programs(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º"""
        search_term = self.search_var.get().lower()
        if not search_term:
            return self.programs
        
        filtered_programs = [
            prog for prog in self.programs 
            if search_term in prog['name'].lower() or search_term in prog['path'].lower()
        ]
        
        return filtered_programs

    def update_program_cards(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–∏—Ç–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º"""
        # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–ª–∏—Ç–∫–∏
        for widget in self.programs_grid.winfo_children():
            widget.destroy()
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        filtered_programs = self.get_filtered_programs()
        
        if not filtered_programs:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º
            no_programs_label = ctk.CTkLabel(
                self.programs_grid,
                text="üîç –ü—Ä–æ–≥—Ä–∞–º–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å",
                font=ctk.CTkFont(size=18, weight="bold"),
                text_color="#888888"
            )
            no_programs_label.grid(row=0, column=0, columnspan=3, pady=50)
            return
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏
        columns = int(self.settings.get('columns_count', 3))
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Å–µ—Ç–∫–∏
        for i in range(columns):
            self.programs_grid.grid_columnconfigure(i, weight=1)
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∏—Ç–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º
        for i, program in enumerate(filtered_programs):
            row = i // columns
            col = i % columns
            self.create_program_tile(program, row, col)
        
        print(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–ª–∏—Ç–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º: {len(filtered_programs)}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        if self.search_var.get().strip():
            self.animate_search_results()
    
    def create_program_tile(self, program, row, col):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∏—Ç–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—Ä–µ–π–º–∞ –ø–ª–∏—Ç–∫–∏
        tile_frame = ctk.CTkFrame(
            self.programs_grid,
            fg_color="#2d2d2d",
            corner_radius=15,
            border_width=2,
            border_color="#404040"
        )
        tile_frame.grid(row=row, column=col, padx=10, pady=10, sticky="nsew")
        
        # –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–ª–∏—Ç–∫–∏
        self.animate_tile_appearance(tile_frame, delay=row + col)
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        content_frame = ctk.CTkFrame(tile_frame, fg_color="transparent")
        content_frame.pack(fill="both", expand=True, padx=15, pady=15)
        
        # –ò–∫–æ–Ω–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        icon_label = ctk.CTkLabel(
            content_frame,
            text=self.get_program_icon(program),
            font=ctk.CTkFont(size=48),
            text_color="#FFD700"
        )
        icon_label.pack(pady=(0, 10))
        
        # –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        name_label = ctk.CTkLabel(
            content_frame,
            text=program['name'],
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color="#FFFFFF",
            wraplength=150
        )
        name_label.pack(pady=(0, 5))
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏—è
        category_label = ctk.CTkLabel(
            content_frame,
            text=f"üìÅ {program.get('category', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')}",
            font=ctk.CTkFont(size=12),
            text_color="#87CEEB"
        )
        category_label.pack(pady=(0, 15))
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_frame = ctk.CTkFrame(content_frame, fg_color="transparent")
        buttons_frame.pack(fill="x")
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞
        launch_button = ctk.CTkButton(
            buttons_frame,
            text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å",
            command=lambda: self.launch_program_with_animation(program, tile_frame),
            font=ctk.CTkFont(size=12, weight="bold"),
            height=35,
            fg_color="#4CAF50",
            hover_color="#45a049",
            corner_radius=10
        )
        launch_button.pack(side="left", fill="x", expand=True, padx=(0, 5))
        
        # –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        edit_button = ctk.CTkButton(
            buttons_frame,
            text="‚úèÔ∏è",
            command=lambda: EditProgramWindow(self.root, program, lambda updated_prog: self.update_program_callback(updated_prog, self.programs.index(program))),
            font=ctk.CTkFont(size=12, weight="bold"),
            width=35,
            height=35,
            fg_color="#2196F3",
            hover_color="#1976D2",
            corner_radius=10
        )
        edit_button.pack(side="right", padx=(5, 0))
        
        # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
        delete_button = ctk.CTkButton(
            buttons_frame,
            text="üóëÔ∏è",
            command=lambda: self.delete_program(program),
            font=ctk.CTkFont(size=12, weight="bold"),
            width=35,
            height=35,
            fg_color="#F44336",
            hover_color="#D32F2F",
            corner_radius=10
        )
        delete_button.pack(side="right")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –Ω–∞–≤–µ–¥–µ–Ω–∏—è
        def on_enter(event):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–±—ã—Ç–∏–µ –ø—Ä–∏—à–ª–æ –æ—Ç –ø–ª–∏—Ç–∫–∏ –∏–ª–∏ –µ—ë —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
            widget = event.widget
            while widget and widget != tile_frame:
                widget = widget.master
            if widget == tile_frame:
                tile_frame.configure(border_color="#FFD700", fg_color="#3d3d3d")
        
        def on_leave(event):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫—É—Ä—Å–æ—Ä –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∏–Ω—É–ª –ø–ª–∏—Ç–∫—É
            x, y = event.widget.winfo_pointerxy()
            widget_under_cursor = event.widget.winfo_containing(x, y)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∫—É—Ä—Å–æ—Ä –Ω–∞–¥ –ø–ª–∏—Ç–∫–æ–π –∏–ª–∏ –µ—ë —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
            is_over_tile = False
            while widget_under_cursor:
                if widget_under_cursor == tile_frame:
                    is_over_tile = True
                    break
                widget_under_cursor = widget_under_cursor.master
            
            if not is_over_tile:
                tile_frame.configure(border_color="#404040", fg_color="#2d2d2d")
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∫–æ –≤—Å–µ–º –¥–æ—á–µ—Ä–Ω–∏–º —ç–ª–µ–º–µ–Ω—Ç–∞–º
        tile_frame.bind("<Enter>", on_enter)
        tile_frame.bind("<Leave>", on_leave)
        
        # –¢–∞–∫–∂–µ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
        content_frame.bind("<Enter>", on_enter)
        content_frame.bind("<Leave>", on_leave)
        
        return tile_frame
    
    def launch_program_with_animation(self, program, tile_frame):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π"""
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        self.animate_program_launch(tile_frame)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É
        self.launch_program(program)
    
    def edit_program(self, program):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã —á–µ—Ä–µ–∑ –º–µ–Ω—é"""
        if not self.programs:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º –ø—É—Å—Ç! üì≠")
            return
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏–π –ø—Ä–æ–≥—Ä–∞–º–º
        program_names = [p['name'] for p in self.programs]
        
        # –î–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        selected = simpledialog.askstring(
            "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã",
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n{', '.join(program_names)}"
        )
        
        if selected:
            # –ü–æ–∏—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã
            for i, p in enumerate(self.programs):
                if p['name'] == selected:
                    EditProgramWindow(self.root, program, lambda updated_prog: self.update_program_callback(updated_prog, i))
                    return
            
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ü—Ä–æ–≥—Ä–∞–º–º–∞ '{selected}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! ‚ùå")
    
    def launch_program(self, program):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
            if not os.path.exists(program['path']):
                messagebox.showerror(
                    "–û—à–∏–±–∫–∞",
                    f"–§–∞–π–ª '{program['path']}' –Ω–µ –Ω–∞–π–¥–µ–Ω! ‚ùå"
                )
                return
            
            # –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã
            subprocess.Popen([program['path']])
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            if self.settings.get('track_usage', True):
                self.record_program_launch(program)
            
            if self.settings.get('show_notifications', True):
                messagebox.showinfo(
                    "–£—Å–ø–µ—Ö",
                    f"–ü—Ä–æ–≥—Ä–∞–º–º–∞ '{program['name']}' –∑–∞–ø—É—â–µ–Ω–∞! üöÄ"
                )
            
        except Exception as e:
            messagebox.showerror(
                "–û—à–∏–±–∫–∞",
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É: {str(e)} ‚ùå"
            )
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.root.mainloop()

    def get_program_icon(self, program):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é —Ñ–∞–π–ª–∞
        path = program.get('path', '')
        if not path:
            return "‚ö°"
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        _, ext = os.path.splitext(path.lower())
        
        # –°–ª–æ–≤–∞—Ä—å –∏–∫–æ–Ω–æ–∫ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º
        icon_map = {
            '.exe': '‚ö°',
            '.msi': 'üì¶',
            '.lnk': 'üîó',
            '.bat': 'üñ•Ô∏è',
            '.cmd': 'üñ•Ô∏è',
            '.ps1': 'üíª',
            '.py': 'üêç',
            '.js': 'üìú',
            '.html': 'üåê',
            '.txt': 'üìÑ',
            '.doc': 'üìù',
            '.docx': 'üìù',
            '.pdf': 'üìï',
            '.jpg': 'üñºÔ∏è',
            '.jpeg': 'üñºÔ∏è',
            '.png': 'üñºÔ∏è',
            '.gif': 'üñºÔ∏è',
            '.mp3': 'üéµ',
            '.mp4': 'üé¨',
            '.avi': 'üé¨',
            '.mkv': 'üé¨',
            '.zip': 'üì¶',
            '.rar': 'üì¶',
            '.7z': 'üì¶',
            '.iso': 'üíø'
        }
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∫–æ–Ω–∫—É –∏–ª–∏ –∑–Ω–∞—á–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return icon_map.get(ext, 'üìÑ')
    
    def delete_program(self, program):
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        confirm = messagebox.askyesno(
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É '{program['name']}'?"
        )
        
        if confirm:
            # –ù–∞—Ö–æ–¥–∏–º –∏ —É–¥–∞–ª—è–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É
            for i, p in enumerate(self.programs):
                if p['name'] == program['name'] and p['path'] == program['path']:
                    del self.programs[i]
                    self.save_programs()
                    self.update_program_cards()
                    
                    if self.settings.get('show_notifications', True):
                        messagebox.showinfo(
                            "–£—Å–ø–µ—Ö",
                            f"–ü—Ä–æ–≥—Ä–∞–º–º–∞ '{program['name']}' —É–¥–∞–ª–µ–Ω–∞! üóëÔ∏è"
                        )
                    return
            
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ü—Ä–æ–≥—Ä–∞–º–º–∞ '{program['name']}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
    
    def update_program_callback(self, updated_program, index):
        """Callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã (–∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã)
        for i, p in enumerate(self.programs):
            if i != index and p['name'] == updated_program['name']:
                messagebox.showerror(
                    "–û—à–∏–±–∫–∞",
                    "–ü—Ä–æ–≥—Ä–∞–º–º–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!"
                )
                return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É
        self.programs[index] = updated_program
        self.save_programs()
        self.update_program_cards()
        
        if self.settings.get('show_notifications', True):
            messagebox.showinfo(
                "–£—Å–ø–µ—Ö",
                f"–ü—Ä–æ–≥—Ä–∞–º–º–∞ '{updated_program['name']}' –æ–±–Ω–æ–≤–ª–µ–Ω–∞! ‚úèÔ∏è"
            )
    
    def load_usage_stats(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        if os.path.exists(self.usage_file):
            try:
                with open(self.usage_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except:
                return self.get_default_usage_stats()
        return self.get_default_usage_stats()
    
    def save_usage_stats(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        with open(self.usage_file, 'w', encoding='utf-8') as f:
            json.dump(self.usage_stats, f, ensure_ascii=False, indent=2)
    
    def get_default_usage_stats(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        return {
            'programs': {},
            'total_launches': 0,
            'total_time': 0,
            'last_used': None,
            'daily_stats': {},
            'weekly_stats': {}
        }
    
    def start_usage_tracking(self):
        """–ó–∞–ø—É—Å–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        def track_usage():
            while True:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                    time.sleep(30)
                    self.update_usage_stats()
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: {e}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        tracking_thread = threading.Thread(target=track_usage, daemon=True)
        tracking_thread.start()
    
    def update_usage_stats(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        current_time = time.time()
        today = time.strftime("%Y-%m-%d")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º
        for program_name, start_time in self.active_programs.items():
            if program_name in self.usage_stats['programs']:
                elapsed_time = current_time - start_time
                self.usage_stats['programs'][program_name]['total_time'] += elapsed_time
                self.active_programs[program_name] = current_time
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if today not in self.usage_stats['daily_stats']:
            self.usage_stats['daily_stats'][today] = {
                'launches': 0,
                'total_time': 0,
                'programs_used': []
            }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.save_usage_stats()
    
    def record_program_launch(self, program):
        """–ó–∞–ø–∏—Å—å –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        program_name = program['name']
        current_time = time.time()
        today = time.strftime("%Y-%m-%d")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–≥—Ä–∞–º–º—ã, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if program_name not in self.usage_stats['programs']:
            self.usage_stats['programs'][program_name] = {
                'launches': 0,
                'total_time': 0,
                'last_used': None,
                'first_used': None
            }
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.usage_stats['programs'][program_name]['launches'] += 1
        self.usage_stats['programs'][program_name]['last_used'] = current_time
        
        if not self.usage_stats['programs'][program_name]['first_used']:
            self.usage_stats['programs'][program_name]['first_used'] = current_time
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.usage_stats['total_launches'] += 1
        self.usage_stats['last_used'] = current_time
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if today not in self.usage_stats['daily_stats']:
            self.usage_stats['daily_stats'][today] = {
                'launches': 0,
                'total_time': 0,
                'programs_used': []
            }
        
        self.usage_stats['daily_stats'][today]['launches'] += 1
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –∏–º–µ–Ω–∏ –µ—â—ë –Ω–µ—Ç
        if program_name not in self.usage_stats['daily_stats'][today]['programs_used']:
            self.usage_stats['daily_stats'][today]['programs_used'].append(program_name)
        
        # –û—Ç–º–µ—á–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—É—é
        self.active_programs[program_name] = current_time
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.save_usage_stats()
    
    def stop_program_tracking(self, program_name):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        if program_name in self.active_programs:
            start_time = self.active_programs[program_name]
            elapsed_time = time.time() - start_time
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            if program_name in self.usage_stats['programs']:
                self.usage_stats['programs'][program_name]['total_time'] += elapsed_time
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
            del self.active_programs[program_name]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.save_usage_stats()

    def get_program_icon_pil(self, path):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ PIL Image"""
        try:
            # –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - —Å–æ–∑–¥–∞–µ–º –∏–∫–æ–Ω–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞
            file_ext = os.path.splitext(path)[1].lower()
            
            # –°–æ–∑–¥–∞–µ–º —Ü–≤–µ—Ç–Ω—É—é –∏–∫–æ–Ω–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
            if file_ext == '.exe':
                color = (70, 130, 180)  # –°–∏–Ω–∏–π
            elif file_ext == '.msi':
                color = (255, 140, 0)   # –û—Ä–∞–Ω–∂–µ–≤—ã–π
            elif file_ext == '.lnk':
                color = (255, 215, 0)   # –ó–æ–ª–æ—Ç–æ–π
            else:
                color = (128, 128, 128) # –°–µ—Ä—ã–π
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            img = Image.new('RGBA', (32, 32), color + (255,))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–π —É–∑–æ—Ä
            for i in range(8, 24):
                for j in range(8, 24):
                    if (i + j) % 2 == 0:
                        img.putpixel((i, j), (255, 255, 255, 100))
            
            return img
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–∫–æ–Ω–∫–∏ –¥–ª—è {path}: {e}")
            return None
        
        return None

    def animate_tile_appearance(self, tile_frame, delay=0):
        """–ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–ª–∏—Ç–∫–∏"""
        # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏ 0
        tile_frame.configure(fg_color="#1a1a1a")
        
        # –°—á–µ—Ç—á–∏–∫ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        self.tile_animation_step = 0
        
        def animate_step():
            if self.tile_animation_step < 10:
                alpha = self.tile_animation_step / 10.0
                color = f"#{int(45 * alpha):02x}{int(45 * alpha):02x}{int(45 * alpha):02x}"
                tile_frame.configure(fg_color=color)
                self.tile_animation_step += 1
                self.root.after(20, animate_step)
            else:
                # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ü–≤–µ—Ç
                tile_frame.configure(fg_color="#2d2d2d")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        self.root.after(delay * 100, animate_step)
    
    def animate_button_hover(self, button, original_color, hover_color):
        """–ê–Ω–∏–º–∞—Ü–∏—è –Ω–∞–≤–µ–¥–µ–Ω–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É"""
        def animate_hover():
            # –ü–ª–∞–≤–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞
            for i in range(10):
                alpha = i / 10.0
                # –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –º–µ–∂–¥—É —Ü–≤–µ—Ç–∞–º–∏
                r1, g1, b1 = int(original_color[1:3], 16), int(original_color[3:5], 16), int(original_color[5:7], 16)
                r2, g2, b2 = int(hover_color[1:3], 16), int(hover_color[3:5], 16), int(hover_color[5:7], 16)
                
                r = int(r1 + (r2 - r1) * alpha)
                g = int(g1 + (g2 - g1) * alpha)
                b = int(b1 + (b2 - b1) * alpha)
                
                color = f"#{r:02x}{g:02x}{b:02x}"
                button.configure(fg_color=color)
                time.sleep(0.01)
        
        animation_thread = threading.Thread(target=animate_hover, daemon=True)
        animation_thread.start()
    
    def animate_program_launch(self, tile_frame):
        """–ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ü–≤–µ—Ç
        original_color = tile_frame.cget("fg_color")
        
        # –°—á–µ—Ç—á–∏–∫ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        self.launch_animation_step = 0
        
        def animate_step():
            if self.launch_animation_step < 6:
                # –ü—Ä–æ—Å—Ç–∞—è –∞–Ω–∏–º–∞—Ü–∏—è —Ü–≤–µ—Ç–∞ - –º–∏–≥–∞–Ω–∏–µ –∑–µ–ª–µ–Ω—ã–º
                if self.launch_animation_step % 2 == 0:
                    tile_frame.configure(fg_color="#4CAF50")  # –ó–µ–ª–µ–Ω—ã–π
                else:
                    tile_frame.configure(fg_color=original_color)  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π
                self.launch_animation_step += 1
                self.root.after(150, animate_step)
            else:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ü–≤–µ—Ç
                tile_frame.configure(fg_color=original_color)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        animate_step()
    
    def animate_search_results(self):
        """–ê–Ω–∏–º–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–ª–∏—Ç–∫–∏
        tiles = [child for child in self.programs_grid.winfo_children() 
                if isinstance(child, ctk.CTkFrame)]
        
        # –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        for i, tile in enumerate(tiles):
            self.root.after(i * 50, lambda t=tile, d=i: self.animate_tile_appearance(t, d))

    def check_updates(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        self.update_manager.check_for_updates(silent=False)
    
    def show_update_info(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö"""
        self.update_manager.show_update_info()
    
    def show_update_settings(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        settings_window = ctk.CTkToplevel(self.root)
        settings_window.title("üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")
        settings_window.geometry("500x400")
        settings_window.resizable(False, False)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        settings_window.transient(self.root)
        settings_window.grab_set()
        settings_window.focus_set()
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
        settings_window.update_idletasks()
        width = settings_window.winfo_width()
        height = settings_window.winfo_height()
        x = (settings_window.winfo_screenwidth() // 2) - (width // 2)
        y = (settings_window.winfo_screenheight() // 2) - (height // 2)
        settings_window.geometry(f"{width}x{height}+{x}+{y}")
        
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = ctk.CTkFrame(settings_window, fg_color="#1a1a1a")
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ctk.CTkLabel(
            main_frame,
            text="üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π",
            font=ctk.CTkFont(size=24, weight="bold"),
            text_color="#FFD700"
        )
        title_label.pack(pady=20)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏
        version_frame = ctk.CTkFrame(main_frame, fg_color="#2d2d2d", corner_radius=10)
        version_frame.pack(fill="x", padx=20, pady=10)
        
        version_label = ctk.CTkLabel(
            version_frame,
            text=f"–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {CURRENT_VERSION}",
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color="#FFFFFF"
        )
        version_label.pack(pady=15)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        settings_frame = ctk.CTkFrame(main_frame, fg_color="#2d2d2d", corner_radius=10)
        settings_frame.pack(fill="x", padx=20, pady=10)
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        auto_check_var = tk.BooleanVar(value=self.settings.get('check_updates', True))
        
        auto_check_switch = ctk.CTkSwitch(
            settings_frame,
            text="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ",
            variable=auto_check_var,
            font=ctk.CTkFont(size=14),
            fg_color="#4CAF50",
            progress_color="#45a049"
        )
        auto_check_switch.pack(pady=15, padx=20)
        
        # –ö–Ω–æ–ø–∫–∏
        buttons_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        buttons_frame.pack(fill="x", padx=20, pady=20)
        
        check_button = ctk.CTkButton(
            buttons_frame,
            text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
            command=self.check_updates,
            font=ctk.CTkFont(size=14, weight="bold"),
            height=40,
            fg_color="#2196F3",
            hover_color="#1976D2",
            corner_radius=20
        )
        check_button.pack(side="left", padx=(0, 10), expand=True)
        
        save_button = ctk.CTkButton(
            buttons_frame,
            text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
            command=lambda: self.save_update_settings(auto_check_var.get(), settings_window),
            font=ctk.CTkFont(size=14, weight="bold"),
            height=40,
            fg_color="#4CAF50",
            hover_color="#45a049",
            corner_radius=20
        )
        save_button.pack(side="right", padx=(10, 0), expand=True)
    
    def save_update_settings(self, auto_check, window):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        self.settings['check_updates'] = auto_check
        self.save_settings(self.settings)
        
        messagebox.showinfo(
            "‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ",
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!"
        )
        window.destroy()

class DocumentationWindow:
    def __init__(self, parent):
        self.parent = parent
        self.expanded = {}
        self.content_frames = {}
        
        # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        self.window = tk.Toplevel(parent)
        self.window.title("üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è - Cursor Launcher")
        self.window.geometry("900x700")
        self.window.configure(bg="#1E1E1E")
        self.window.resizable(True, True)
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        self.center_window()
        
        # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–º —Ñ–æ–Ω–æ–º
        main_container = tk.Frame(self.window, bg="#1E1E1E", relief="flat", bd=0)
        main_container.pack(fill="both", expand=True, padx=20, pady=20)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫—Ä–∞—Å–∏–≤—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º
        title_frame = tk.Frame(main_container, bg="#1E1E1E", relief="flat", bd=0)
        title_frame.pack(fill="x", pady=(0, 20))
        
        # –ò–∫–æ–Ω–∫–∞ –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = tk.Label(
            title_frame,
            text="üìö –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Ø",
            font=("Segoe UI", 24, "bold"),
            fg="#FFD700",
            bg="#1E1E1E"
        )
        title_label.pack()
        
        # –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
        subtitle_label = tk.Label(
            title_frame,
            text="–ü–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é Cursor Launcher",
            font=("Segoe UI", 12),
            fg="#CCCCCC",
            bg="#1E1E1E"
        )
        subtitle_label.pack(pady=(5, 0))
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        separator = tk.Frame(title_frame, height=2, bg="#FF8C00")
        separator.pack(fill="x", pady=15)
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º—É—é –æ–±–ª–∞—Å—Ç—å
        canvas = tk.Canvas(main_container, bg="#1E1E1E", highlightthickness=0, relief="flat")
        scrollbar = ttk.Scrollbar(main_container, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg="#1E1E1E", relief="flat", bd=0)
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # –£–ø–∞–∫–æ–≤–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∫ –∫–æ–ª–µ—Å—É –º—ã—à–∏
        def _on_mousewheel(event):
            canvas.yview_scroll(int(-1*(event.delta/120)), "units")
        canvas.bind_all("<MouseWheel>", _on_mousewheel)
        
        # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        self.sections = {
            "üéØ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏": [
                ("‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º", "‚ë† –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É' –≤ –≤–µ—Ä—Ö–Ω–µ–π –ø–∞–Ω–µ–ª–∏\n‚ë° –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø—É—Ç—å –∫ .exe —Ñ–∞–π–ª—É\n‚ë¢ –î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –∂–µ–ª–∞–Ω–∏—é\n‚ë£ –ù–∞–∂–º–∏—Ç–µ '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å' –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã"),
                ("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º", "‚ë† –ù–∞ –∫–∞–∂–¥–æ–π –ø–ª–∏—Ç–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞ '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å'\n‚ë° –ò–∑–º–µ–Ω–∏—Ç–µ –ª—é–±—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã\n‚ë¢ –ù–∞–∂–º–∏—Ç–µ '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å' –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π"),
                ("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º", "‚ë† –ù–∞ –∫–∞–∂–¥–æ–π –ø–ª–∏—Ç–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞ 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å'\n‚ë° –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤ –¥–∏–∞–ª–æ–≥–æ–≤–æ–º –æ–∫–Ω–µ\n‚ë¢ –ü—Ä–æ–≥—Ä–∞–º–º–∞ —É–¥–∞–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–∑ —Å–ø–∏—Å–∫–∞, —Ñ–∞–π–ª –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–∞ –¥–∏—Å–∫–µ"),
                ("‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º", "‚ë† –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å' –Ω–∞ –ø–ª–∏—Ç–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã\n‚ë° –°—Ç–∞—Ç—É—Å ‚úÖ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ —Ñ–∞–π–ª –¥–æ—Å—Ç—É–ø–µ–Ω\n‚ë¢ –°—Ç–∞—Ç—É—Å ‚ùå –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            ],
            "üîç –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è": [
                ("üîç –ü–æ–∏—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º", "‚ë† –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª–µ 'üîç –ü–æ–∏—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º...' –≤ –≤–µ—Ä—Ö–Ω–µ–π –ø–∞–Ω–µ–ª–∏\n‚ë° –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É\n‚ë¢ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø—Ä–∏ –≤–≤–æ–¥–µ\n‚ë£ –ü–æ–∏—Å–∫ –Ω–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É"),
                ("üìä –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è", "‚ë† –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∏ –≤–≤–æ–¥–µ —Ç–µ–∫—Å—Ç–∞\n‚ë° –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ\n‚ë¢ –û—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã\n‚ë£ –û—á–∏—Å—Ç–∏—Ç–µ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö –ø—Ä–æ–≥—Ä–∞–º–º")
            ],
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è": [
                ("üîß –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", "‚ë† –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏' –≤ –Ω–∏–∂–Ω–µ–π –ø–∞–Ω–µ–ª–∏\n‚ë° –í–∫–ª–∞–¥–∫–∞ '–û–±—â–∏–µ': –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫, —è–∑—ã–∫, —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞\n‚ë¢ –í–∫–ª–∞–¥–∫–∞ '–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å': —Ç–µ–º–∞, —Ä–∞–∑–º–µ—Ä –ø–ª–∏—Ç–æ–∫\n‚ë£ –í–∫–ª–∞–¥–∫–∞ '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è': –∑–≤—É–∫–∏, –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ –æ–∫–Ω–∞"),
                ("üöÄ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫", "‚ë† –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –≤–∫–ª—é—á–∏—Ç–µ '–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–∏—Å—Ç–µ–º—ã'\n‚ë° –õ–∞—É–Ω—á–µ—Ä –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞\n‚ë¢ –ú–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"),
                ("üé® –í–Ω–µ—à–Ω–∏–π –≤–∏–¥", "‚ë† –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É: —Ç–µ–º–Ω–∞—è, —Å–≤–µ—Ç–ª–∞—è –∏–ª–∏ —Å–∏—Å—Ç–µ–º–Ω–∞—è\n‚ë° –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞: 800x600, 1000x700, 1200x800, 1400x900\n‚ë¢ –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ")
            ],
            "üé® –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å": [
                ("üì± –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å", "‚ú¶ –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\n‚ú¶ –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º\n‚ú¶ –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã\n‚ú¶ –°—á–µ—Ç—á–∏–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–≥—Ä–∞–º–º"),
                ("üìã –û–±–ª–∞—Å—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º", "‚ú¶ –ü–ª–∏—Ç–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º –≤ —Å–µ—Ç–∫–µ 3x3\n‚ú¶ –ö–∞–∂–¥–∞—è –ø–ª–∏—Ç–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç:\n  - –ò–∫–æ–Ω–∫—É –ø—Ä–æ–≥—Ä–∞–º–º—ã\n  - –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã\n  - –ö–∞—Ç–µ–≥–æ—Ä–∏—é (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞)\n  - –°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏\n  - –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"),
                ("‚öôÔ∏è –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å", "‚ú¶ –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫\n‚ú¶ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏ Windows\n‚ú¶ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º")
            ],
            "üîß –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º": [
                ("‚ùå –ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è", "‚ë† –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏\n‚ë° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø—É—Å–∫ —Ñ–∞–π–ª–∞\n‚ë¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –ª–∏ –∞–Ω—Ç–∏–≤–∏—Ä—É—Å\n‚ë£ –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É"),
                ("üìã –ü–ª–∏—Ç–∫–∏ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è", "‚ë† –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª 'programs.json' –≤ –ø–∞–ø–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\n‚ë° –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n‚ë¢ –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∞—Ö –Ω–∞ —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞"),
                ("üîç –ü–æ–∏—Å–∫ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", "‚ë† –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–≤–µ–¥–µ–Ω —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞\n‚ë° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫\n‚ë¢ –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É"),
                ("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è", "‚ë† –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª 'settings.json' –≤ –ø–∞–ø–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\n‚ë° –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∞—Ö –Ω–∞ –∑–∞–ø–∏—Å—å –≤ –ø–∞–ø–∫—É\n‚ë¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
            ],
            "üí° –°–æ–≤–µ—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏": [
                ("üìÅ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º", "‚ú¶ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–æ—Ö–æ–∂–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º\n‚ú¶ –î–æ–±–∞–≤–ª—è–π—Ç–µ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è\n‚ú¶ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–Ω—è—Ç–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º"),
                ("üîç –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫", "‚ú¶ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö –ø—Ä–æ–≥—Ä–∞–º–º\n‚ú¶ –ò—â–∏—Ç–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\n‚ú¶ –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –ø–æ –ø—É—Ç—è–º –∫ —Ñ–∞–π–ª–∞–º"),
                ("‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "‚ú¶ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–µ –±–æ–ª–µ–µ 50 –ø—Ä–æ–≥—Ä–∞–º–º –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏\n‚ú¶ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã\n‚ú¶ –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±—ã—Å—Ç—Ä–æ –¥–∞–∂–µ –ø—Ä–∏ –±–æ–ª—å—à–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ø—Ä–æ–≥—Ä–∞–º–º"),
                ("üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "‚ú¶ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏\n‚ú¶ –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ - —Ñ–∞–π–ª –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–∞ –¥–∏—Å–∫–µ\n‚ú¶ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö")
            ]
        }
        
        # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–¥–µ–ª—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        for section_title, subsections in self.sections.items():
            # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞
            section_container = tk.Frame(scrollable_frame, bg="#2A2A2A", relief="flat", bd=0)
            section_container.pack(fill="x", pady=(0, 15), padx=5)
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª–∞ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–º —ç—Ñ—Ñ–µ–∫—Ç–æ–º
            section_header = tk.Frame(section_container, bg="#3A3A3A", relief="flat", bd=0)
            section_header.pack(fill="x", pady=(10, 0), padx=10)
            
            # –ö–Ω–æ–ø–∫–∞-–∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª–∞
            section_btn = tk.Button(
                section_header,
                text=f"‚ñ∂ {section_title}",
                font=("Segoe UI", 14, "bold"),
                fg="#FFFFFF",
                bg="#3A3A3A",
                activebackground="#4A4A4A",
                activeforeground="#FFD700",
                relief="flat",
                bd=0,
                cursor="hand2",
                command=lambda s=section_title, c=section_container, b=None: self.toggle_section(c, b, s)
            )
            section_btn.pack(fill="x", pady=8, padx=15)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
            section_btn.configure(command=lambda s=section_title, c=section_container, b=section_btn: self.toggle_section(c, b, s))
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥—Ä–∞–∑–¥–µ–ª—ã
            for subsection_title, content in subsections:
                # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞
                subsection_container = tk.Frame(section_container, bg="#2A2A2A", relief="flat", bd=0)
                subsection_container.pack(fill="x", pady=(5, 0), padx=15)
                
                # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞
                subsection_btn = tk.Button(
                    subsection_container,
                    text=f"‚ñ∂ {subsection_title}",
                    font=("Segoe UI", 12),
                    fg="#E0E0E0",
                    bg="#2A2A2A",
                    activebackground="#3A3A3A",
                    activeforeground="#FFD700",
                    relief="flat",
                    bd=0,
                    cursor="hand2",
                    command=lambda c=subsection_container, b=None, t=subsection_title, cont=content: self.toggle(c, b, cont, t)
                )
                subsection_btn.pack(fill="x", pady=4, padx=10)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–Ω–æ–ø–∫—É
                subsection_btn.configure(command=lambda c=subsection_container, b=subsection_btn, t=subsection_title, cont=content: self.toggle(c, b, cont, t))
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –≤–Ω–∏–∑—É
        close_frame = tk.Frame(main_container, bg="#1E1E1E", relief="flat", bd=0)
        close_frame.pack(fill="x", pady=(20, 0))
        
        close_btn = tk.Button(
            close_frame,
            text="‚úñ –ó–∞–∫—Ä—ã—Ç—å",
            font=("Segoe UI", 12, "bold"),
            fg="#FFFFFF",
            bg="#FF6B6B",
            activebackground="#FF5252",
            activeforeground="#FFFFFF",
            relief="flat",
            bd=0,
            cursor="hand2",
            command=self.window.destroy
        )
        close_btn.pack(pady=10)
        
        # –§–æ–∫—É—Å –Ω–∞ –æ–∫–Ω–æ
        self.window.focus_set()
        self.window.grab_set()  # –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ

    def center_window(self):
        """–¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞"""
        self.window.update_idletasks()
        width = self.window.winfo_width()
        height = self.window.winfo_height()
        x = (self.window.winfo_screenwidth() // 2) - (width // 2)
        y = (self.window.winfo_screenheight() // 2) - (height // 2)
        self.window.geometry(f"{width}x{height}+{x}+{y}")

    def toggle_section(self, container, btn, title):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∞"""
        # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –∑–∞–≥–ª—É—à–∫–∞, –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
        pass

    def toggle(self, container, btn, content, title):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞"""
        if self.expanded.get(btn, False):
            # –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º
            for widget in container.winfo_children():
                if isinstance(widget, tk.Frame) and widget in self.content_frames:
                    widget.destroy()
                    del self.content_frames[widget]
            btn.configure(text=f"‚ñ∂ {title}")
            self.expanded[btn] = False
        else:
            # –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
            content_frame = tk.Frame(container, bg="#3A3A3A", relief="flat", bd=0)
            content_frame.pack(fill="x", pady=(3, 0), padx=3)
            self.content_frames[content_frame] = True
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–∏–¥–∂–µ—Ç
            text_widget = tk.Text(
                content_frame,
                wrap="word",
                font=("Segoe UI", 11),
                bg="#3A3A3A",
                fg="#FFFFFF",
                relief="flat",
                padx=10,
                pady=6,
                spacing1=2,
                spacing2=1,
                spacing3=2,
                selectbackground="#FF8C00",
                selectforeground="#FFFFFF",
                insertbackground="#FFD700",
                state="normal",
                height=0
            )
            text_widget.pack(fill="x", padx=6, pady=4)
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            text_widget.insert("1.0", content)
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–µ–≥–∏
            text_widget.tag_configure("step", foreground="#FFD700", font=("Segoe UI", 11, "bold"))
            text_widget.tag_configure("bullet", foreground="#87CEEB", font=("Segoe UI", 11))
            text_widget.tag_configure("highlight", foreground="#98FB98", font=("Segoe UI", 11, "bold"))
            text_widget.tag_configure("warning", foreground="#FF6B6B", font=("Segoe UI", 11, "bold"))
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ —Ç–µ–∫—Å—Ç—É
            self.format_text_content(text_widget, content)
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–∏–¥–∂–µ—Ç–∞
            self.auto_resize_text_widget(text_widget)
            text_widget.configure(state="disabled")
            
            btn.configure(text=f"‚ñº {title}")
            self.expanded[btn] = True

    def format_text_content(self, text_widget, content):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫ —Ç–µ–∫—Å—Ç—É"""
        lines = content.split('\n')
        current_line = 1
        
        for line in lines:
            if line.strip():
                if line.startswith("‚ë†") or line.startswith("‚ë°") or line.startswith("‚ë¢") or line.startswith("‚ë£"):
                    start = f"{current_line}.0"
                    end = f"{current_line}.{len(line)}"
                    text_widget.tag_add("step", start, end)
                elif line.startswith("‚ú¶"):
                    start = f"{current_line}.0"
                    end = f"{current_line}.{len(line)}"
                    text_widget.tag_add("bullet", start, end)
                elif "‚úÖ" in line or "‚ùå" in line:
                    start = f"{current_line}.0"
                    end = f"{current_line}.{len(line)}"
                    text_widget.tag_add("highlight", start, end)
                elif "–ø—Ä–æ–≤–µ—Ä—å—Ç–µ" in line.lower() or "—É–±–µ–¥–∏—Ç–µ—Å—å" in line.lower():
                    start = f"{current_line}.0"
                    end = f"{current_line}.{len(line)}"
                    text_widget.tag_add("warning", start, end)
            current_line += 1

    def auto_resize_text_widget(self, text_widget):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—ã—Å–æ—Ç—ã —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–∏–¥–∂–µ—Ç–∞ –ø–æ–¥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ"""
        line_count = int(text_widget.index("end-1c").split('.')[0])
        height = min(max(line_count, 3), 15)
        text_widget.configure(height=height)
        
class StatisticsWindow:
    def __init__(self, parent, programs, usage_stats=None, active_programs=None):
        self.parent = parent
        self.programs = programs
        self.usage_stats = usage_stats or {}
        self.active_programs = active_programs or {}
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞
        self.window = ctk.CTkToplevel(parent)
        self.window.title("üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        self.window.geometry("900x700")
        self.window.resizable(False, False)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        self.window.transient(parent)
        self.window.grab_set()
        self.window.focus_set()
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
        self.center_window()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_widgets()
        
    def center_window(self):
        """–¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞"""
        self.window.update_idletasks()
        width = self.window.winfo_width()
        height = self.window.winfo_height()
        x = (self.window.winfo_screenwidth() // 2) - (width // 2)
        y = (self.window.winfo_screenheight() // 2) - (height // 2)
        self.window.geometry(f"{width}x{height}+{x}+{y}")
        
    def format_time(self, seconds):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏"""
        if seconds < 60:
            return f"{int(seconds)} —Å–µ–∫"
        elif seconds < 3600:
            minutes = int(seconds // 60)
            return f"{minutes} –º–∏–Ω"
        else:
            hours = int(seconds // 3600)
            minutes = int((seconds % 3600) // 60)
            return f"{hours}—á {minutes}–º"
        
    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = ctk.CTkFrame(self.window, fg_color="#1a1a1a")
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = ctk.CTkFrame(main_frame, fg_color="#2d2d2d", corner_radius=10)
        header_frame.pack(fill="x", padx=20, pady=(20, 10))
        
        title_label = ctk.CTkLabel(
            header_frame,
            text="üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
            font=ctk.CTkFont(size=24, weight="bold"),
            text_color="#FFD700"
        )
        title_label.pack(pady=20)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_frame = ctk.CTkFrame(main_frame, fg_color="#2d2d2d", corner_radius=10)
        stats_frame.pack(fill="both", expand=True, padx=20, pady=10)
        
        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º–∞—è –æ–±–ª–∞—Å—Ç—å
        scroll_frame = ctk.CTkScrollableFrame(stats_frame)
        scroll_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        general_stats = ctk.CTkFrame(scroll_frame, fg_color="#3d3d3d", corner_radius=10)
        general_stats.pack(fill="x", pady=10)
        
        general_title = ctk.CTkLabel(
            general_stats,
            text="üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            font=ctk.CTkFont(size=18, weight="bold"),
            text_color="#FFFFFF"
        )
        general_title.pack(pady=(15, 10))
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≥—Ä–∞–º–º
        total_programs = len(self.programs)
        total_label = ctk.CTkLabel(
            general_stats,
            text=f"–í—Å–µ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º: {total_programs}",
            font=ctk.CTkFont(size=14),
            text_color="#87CEEB"
        )
        total_label.pack(pady=5)
        
        # –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        available_programs = sum(1 for p in self.programs if os.path.exists(p['path']))
        available_label = ctk.CTkLabel(
            general_stats,
            text=f"–î–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º: {available_programs}",
            font=ctk.CTkFont(size=14),
            text_color="#4CAF50"
        )
        available_label.pack(pady=5)
        
        # –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        unavailable_programs = total_programs - available_programs
        unavailable_label = ctk.CTkLabel(
            general_stats,
            text=f"–ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º: {unavailable_programs}",
            font=ctk.CTkFont(size=14),
            text_color="#F44336"
        )
        unavailable_label.pack(pady=5)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        if self.usage_stats:
            usage_stats_frame = ctk.CTkFrame(scroll_frame, fg_color="#3d3d3d", corner_radius=10)
            usage_stats_frame.pack(fill="x", pady=10)
            
            usage_title = ctk.CTkLabel(
                usage_stats_frame,
                text="üöÄ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
                font=ctk.CTkFont(size=18, weight="bold"),
                text_color="#FFFFFF"
            )
            usage_title.pack(pady=(15, 10))
            
            # –û–±—â–∏–µ –∑–∞–ø—É—Å–∫–∏
            total_launches = self.usage_stats.get('total_launches', 0)
            total_launches_label = ctk.CTkLabel(
                usage_stats_frame,
                text=f"–í—Å–µ–≥–æ –∑–∞–ø—É—Å–∫–æ–≤: {total_launches}",
                font=ctk.CTkFont(size=14),
                text_color="#FFD700"
            )
            total_launches_label.pack(pady=5)
            
            # –û–±—â–µ–µ –≤—Ä–µ–º—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            total_time = self.usage_stats.get('total_time', 0)
            total_time_label = ctk.CTkLabel(
                usage_stats_frame,
                text=f"–û–±—â–µ–µ –≤—Ä–µ–º—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: {self.format_time(total_time)}",
                font=ctk.CTkFont(size=14),
                text_color="#FFD700"
            )
            total_time_label.pack(pady=5)
            
            # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
            active_count = len(self.active_programs)
            active_label = ctk.CTkLabel(
                usage_stats_frame,
                text=f"–°–µ–π—á–∞—Å –∞–∫—Ç–∏–≤–Ω–æ: {active_count} –ø—Ä–æ–≥—Ä–∞–º–º",
                font=ctk.CTkFont(size=14),
                text_color="#4CAF50"
            )
            active_label.pack(pady=5)
        
        # –¢–æ–ø –ø—Ä–æ–≥—Ä–∞–º–º –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
        if self.usage_stats and self.usage_stats.get('programs'):
            top_programs_frame = ctk.CTkFrame(scroll_frame, fg_color="#3d3d3d", corner_radius=10)
            top_programs_frame.pack(fill="x", pady=10)
            
            top_title = ctk.CTkLabel(
                top_programs_frame,
                text="üèÜ –¢–æ–ø –ø—Ä–æ–≥—Ä–∞–º–º –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é",
                font=ctk.CTkFont(size=18, weight="bold"),
                text_color="#FFFFFF"
            )
            top_title.pack(pady=(15, 10))
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–ø—É—Å–∫–æ–≤
            sorted_programs = sorted(
                self.usage_stats['programs'].items(),
                key=lambda x: x[1]['launches'],
                reverse=True
            )[:10]  # –¢–æ–ø 10
            
            for i, (program_name, stats) in enumerate(sorted_programs, 1):
                launches = stats['launches']
                usage_time = self.format_time(stats['total_time'])
                
                program_label = ctk.CTkLabel(
                    top_programs_frame,
                    text=f"{i}. {program_name} - {launches} –∑–∞–ø—É—Å–∫–æ–≤ ({usage_time})",
                    font=ctk.CTkFont(size=12),
                    text_color="#E0E0E0"
                )
                program_label.pack(pady=2, padx=20, anchor="w")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories_stats = ctk.CTkFrame(scroll_frame, fg_color="#3d3d3d", corner_radius=10)
        categories_stats.pack(fill="x", pady=10)
        
        categories_title = ctk.CTkLabel(
            categories_stats,
            text="üè∑Ô∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
            font=ctk.CTkFont(size=18, weight="bold"),
            text_color="#FFFFFF"
        )
        categories_title.pack(pady=(15, 10))
        
        # –ü–æ–¥—Å—á–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories = {}
        for program in self.programs:
            category = program.get('category', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
            categories[category] = categories.get(category, 0) + 1
        
        for category, count in categories.items():
            category_label = ctk.CTkLabel(
                categories_stats,
                text=f"{category}: {count} –ø—Ä–æ–≥—Ä–∞–º–º",
                font=ctk.CTkFont(size=14),
                text_color="#E0E0E0"
            )
            category_label.pack(pady=2)
        
        # –î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if self.usage_stats and self.usage_stats.get('daily_stats'):
            daily_stats_frame = ctk.CTkFrame(scroll_frame, fg_color="#3d3d3d", corner_radius=10)
            daily_stats_frame.pack(fill="x", pady=10)
            
            daily_title = ctk.CTkLabel(
                daily_stats_frame,
                text="üìÖ –î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                font=ctk.CTkFont(size=18, weight="bold"),
                text_color="#FFFFFF"
            )
            daily_title.pack(pady=(15, 10))
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
            today = time.strftime("%Y-%m-%d")
            for i in range(7):
                date = time.strftime("%Y-%m-%d", time.localtime(time.time() - i * 24 * 3600))
                if date in self.usage_stats['daily_stats']:
                    day_stats = self.usage_stats['daily_stats'][date]
                    launches = day_stats['launches']
                    programs_used = len(day_stats['programs_used'])
                    
                    day_label = ctk.CTkLabel(
                        daily_stats_frame,
                        text=f"{date}: {launches} –∑–∞–ø—É—Å–∫–æ–≤, {programs_used} –ø—Ä–æ–≥—Ä–∞–º–º",
                        font=ctk.CTkFont(size=12),
                        text_color="#E0E0E0"
                    )
                    day_label.pack(pady=2, padx=20, anchor="w")
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        close_button = ctk.CTkButton(
            main_frame,
            text="‚úñÔ∏è –ó–∞–∫—Ä—ã—Ç—å",
            command=self.window.destroy,
            font=ctk.CTkFont(size=14, weight="bold"),
            height=40,
            fg_color="#F44336",
            hover_color="#D32F2F",
            corner_radius=20
        )
        close_button.pack(pady=20)

    def load_usage_stats(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        usage_file = getattr(self, 'usage_file', None)
        if usage_file and os.path.exists(usage_file):
            try:
                with open(usage_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: {e}")
                return self.get_default_usage_stats()
        return self.get_default_usage_stats()
    
    def save_usage_stats(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        usage_file = getattr(self, 'usage_file', None)
        if usage_file:
            try:
                with open(usage_file, 'w', encoding='utf-8') as f:
                    json.dump(self.usage_stats, f, ensure_ascii=False, indent=2)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: {e}")

    def get_default_usage_stats(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        return {
            'programs': {},
            'total_launches': 0,
            'total_time': 0,
            'last_used': None,
            'daily_stats': {},
            'weekly_stats': {}
        }
    
    def start_usage_tracking(self):
        """–ó–∞–ø—É—Å–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        def track_usage():
            while True:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                    time.sleep(30)
                    self.update_usage_stats()
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: {e}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        tracking_thread = threading.Thread(target=track_usage, daemon=True)
        tracking_thread.start()
    
    def update_usage_stats(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        current_time = time.time()
        today = time.strftime("%Y-%m-%d")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º
        for program_name, start_time in self.active_programs.items():
            if program_name in self.usage_stats['programs']:
                elapsed_time = current_time - start_time
                self.usage_stats['programs'][program_name]['total_time'] += elapsed_time
                self.active_programs[program_name] = current_time
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if today not in self.usage_stats['daily_stats']:
            self.usage_stats['daily_stats'][today] = {
                'launches': 0,
                'total_time': 0,
                'programs_used': []
            }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.save_usage_stats()
    
    def record_program_launch(self, program):
        """–ó–∞–ø–∏—Å—å –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        program_name = program['name']
        current_time = time.time()
        today = time.strftime("%Y-%m-%d")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–≥—Ä–∞–º–º—ã, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if program_name not in self.usage_stats['programs']:
            self.usage_stats['programs'][program_name] = {
                'launches': 0,
                'total_time': 0,
                'last_used': None,
                'first_used': None
            }
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.usage_stats['programs'][program_name]['launches'] += 1
        self.usage_stats['programs'][program_name]['last_used'] = current_time
        
        if not self.usage_stats['programs'][program_name]['first_used']:
            self.usage_stats['programs'][program_name]['first_used'] = current_time
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.usage_stats['total_launches'] += 1
        self.usage_stats['last_used'] = current_time
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if today not in self.usage_stats['daily_stats']:
            self.usage_stats['daily_stats'][today] = {
                'launches': 0,
                'total_time': 0,
                'programs_used': []
            }
        
        self.usage_stats['daily_stats'][today]['launches'] += 1
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –∏–º–µ–Ω–∏ –µ—â—ë –Ω–µ—Ç
        if program_name not in self.usage_stats['daily_stats'][today]['programs_used']:
            self.usage_stats['daily_stats'][today]['programs_used'].append(program_name)
        
        # –û—Ç–º–µ—á–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—É—é
        self.active_programs[program_name] = current_time
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.save_usage_stats()
    
    def stop_program_tracking(self, program_name):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        if program_name in self.active_programs:
            start_time = self.active_programs[program_name]
            elapsed_time = time.time() - start_time
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            if program_name in self.usage_stats['programs']:
                self.usage_stats['programs'][program_name]['total_time'] += elapsed_time
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
            del self.active_programs[program_name]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.save_usage_stats()

    def get_program_icon_pil(self, path):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ PIL Image"""
        try:
            # –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - —Å–æ–∑–¥–∞–µ–º –∏–∫–æ–Ω–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞
            file_ext = os.path.splitext(path)[1].lower()
            
            # –°–æ–∑–¥–∞–µ–º —Ü–≤–µ—Ç–Ω—É—é –∏–∫–æ–Ω–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
            if file_ext == '.exe':
                color = (70, 130, 180)  # –°–∏–Ω–∏–π
            elif file_ext == '.msi':
                color = (255, 140, 0)   # –û—Ä–∞–Ω–∂–µ–≤—ã–π
            elif file_ext == '.lnk':
                color = (255, 215, 0)   # –ó–æ–ª–æ—Ç–æ–π
            else:
                color = (128, 128, 128) # –°–µ—Ä—ã–π
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            img = Image.new('RGBA', (32, 32), color + (255,))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–π —É–∑–æ—Ä
            for i in range(8, 24):
                for j in range(8, 24):
                    if (i + j) % 2 == 0:
                        img.putpixel((i, j), (255, 255, 255, 100))
            
            return img
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–∫–æ–Ω–∫–∏ –¥–ª—è {path}: {e}")
            return None
        
        return None

    def animate_tile_appearance(self, tile_frame, delay=0):
        """–ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–ª–∏—Ç–∫–∏"""
        # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏ 0
        tile_frame.configure(fg_color="#1a1a1a")
        
        # –°—á–µ—Ç—á–∏–∫ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        self.tile_animation_step = 0
        
        def animate_step():
            if self.tile_animation_step < 10:
                alpha = self.tile_animation_step / 10.0
                color = f"#{int(45 * alpha):02x}{int(45 * alpha):02x}{int(45 * alpha):02x}"
                tile_frame.configure(fg_color=color)
                self.tile_animation_step += 1
                self.root.after(20, animate_step)
            else:
                # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ü–≤–µ—Ç
                tile_frame.configure(fg_color="#2d2d2d")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        self.root.after(delay * 100, animate_step)
    
    def animate_button_hover(self, button, original_color, hover_color):
        """–ê–Ω–∏–º–∞—Ü–∏—è –Ω–∞–≤–µ–¥–µ–Ω–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É"""
        def animate_hover():
            # –ü–ª–∞–≤–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞
            for i in range(10):
                alpha = i / 10.0
                # –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –º–µ–∂–¥—É —Ü–≤–µ—Ç–∞–º–∏
                r1, g1, b1 = int(original_color[1:3], 16), int(original_color[3:5], 16), int(original_color[5:7], 16)
                r2, g2, b2 = int(hover_color[1:3], 16), int(hover_color[3:5], 16), int(hover_color[5:7], 16)
                
                r = int(r1 + (r2 - r1) * alpha)
                g = int(g1 + (g2 - g1) * alpha)
                b = int(b1 + (b2 - b1) * alpha)
                
                color = f"#{r:02x}{g:02x}{b:02x}"
                button.configure(fg_color=color)
                time.sleep(0.01)
        
        animation_thread = threading.Thread(target=animate_hover, daemon=True)
        animation_thread.start()
    
    def animate_program_launch(self, tile_frame):
        """–ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ü–≤–µ—Ç
        original_color = tile_frame.cget("fg_color")
        
        # –°—á–µ—Ç—á–∏–∫ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        self.launch_animation_step = 0
        
        def animate_step():
            if self.launch_animation_step < 6:
                # –ü—Ä–æ—Å—Ç–∞—è –∞–Ω–∏–º–∞—Ü–∏—è —Ü–≤–µ—Ç–∞ - –º–∏–≥–∞–Ω–∏–µ –∑–µ–ª–µ–Ω—ã–º
                if self.launch_animation_step % 2 == 0:
                    tile_frame.configure(fg_color="#4CAF50")  # –ó–µ–ª–µ–Ω—ã–π
                else:
                    tile_frame.configure(fg_color=original_color)  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π
                self.launch_animation_step += 1
                self.root.after(150, animate_step)
            else:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ü–≤–µ—Ç
                tile_frame.configure(fg_color=original_color)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        animate_step()
    
    def animate_search_results(self):
        """–ê–Ω–∏–º–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–ª–∏—Ç–∫–∏
        tiles = [child for child in self.programs_grid.winfo_children() 
                if isinstance(child, ctk.CTkFrame)]
        
        # –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        for i, tile in enumerate(tiles):
            self.root.after(i * 50, lambda t=tile, d=i: self.animate_tile_appearance(t, d))

class UpdateManager:
    def __init__(self, parent):
        self.parent = parent
        self.latest_version = None
        self.update_available = False
        self.update_info = {}
    
    def check_for_updates(self, silent=False):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        def check():
            try:
                # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∑–∞–ø—Ä–æ—Å –∫ API
                # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
                self.simulate_update_check()
                
                if self.update_available and not silent:
                    self.show_update_notification()
                    
            except Exception as e:
                if not silent:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        threading.Thread(target=check, daemon=True).start()
    
    def simulate_update_check(self):
        """–°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã HTTP –∑–∞–ø—Ä–æ—Å
        # –°–µ–π—á–∞—Å –ø—Ä–æ—Å—Ç–æ —Å–∏–º—É–ª–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.latest_version = "1.1.0"
        self.update_available = self.compare_versions(CURRENT_VERSION, self.latest_version) > 0
        
        if self.update_available:
            self.update_info = {
                'version': self.latest_version,
                'title': '–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è Cursor Launcher',
                'description': '–î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –æ—à–∏–±–∫–∏',
                'download_url': GITHUB_RELEASES_URL
            }
    
    def compare_versions(self, current, latest):
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–π"""
        def version_to_tuple(version):
            return tuple(map(int, version.split('.')))
        
        current_tuple = version_to_tuple(current)
        latest_tuple = version_to_tuple(latest)
        
        if latest_tuple > current_tuple:
            return 1
        elif latest_tuple < current_tuple:
            return -1
        else:
            return 0
    
    def show_update_notification(self):
        """–ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏"""
        def show():
            result = messagebox.askyesno(
                "üîÑ –î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ",
                f"–î–æ—Å—Ç—É–ø–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è {self.latest_version}!\n\n"
                f"–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {CURRENT_VERSION}\n"
                f"–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: {self.latest_version}\n\n"
                f"–•–æ—Ç–∏—Ç–µ —Å–∫–∞—á–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ?",
                icon='info'
            )
            
            if result:
                self.download_update()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.parent.after(0, show)
    
    def download_update(self):
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–ª–∏–∑–æ–≤ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
            webbrowser.open(self.update_info['download_url'])
            
            messagebox.showinfo(
                "üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ",
                "–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –æ—Ç–∫—Ä—ã—Ç–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ.\n"
                "–°–∫–∞—á–∞–π—Ç–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é –≤—Ä—É—á–Ω—É—é."
            )
            
        except Exception as e:
            messagebox.showerror(
                "‚ùå –û—à–∏–±–∫–∞",
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:\n{str(e)}"
            )
    
    def show_update_info(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö"""
        info_text = f"–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {CURRENT_VERSION}\n\n"
        
        if self.update_available:
            info_text += f"üÜï –î–æ—Å—Ç—É–ø–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: {self.latest_version}\n"
            info_text += f"–û–ø–∏—Å–∞–Ω–∏–µ: {self.update_info.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n\n"
            info_text += "–ù–∞–∂–º–∏—Ç–µ '–°–∫–∞—á–∞—Ç—å' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."
        else:
            info_text += "‚úÖ –£ –≤–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è."
        
        result = messagebox.askyesno(
            "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö",
            info_text + "\n\n–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ–π—á–∞—Å?"
        )
        
        if result:
            self.check_for_updates(silent=False)

if __name__ == "__main__": 
    app = ModernProgramLauncher()
    app.run() 